
GCS_RF_Module.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800237c  0800237c  0000337c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002394  08002394  00004028  2**0
                  CONTENTS
  4 .ARM          00000008  08002394  08002394  00003394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800239c  0800239c  00004028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800239c  0800239c  0000339c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080023a0  080023a0  000033a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080023a4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004028  2**0
                  CONTENTS
 10 .bss          0000016c  20000028  20000028  00004028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000194  20000194  00004028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000671e  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000181d  00000000  00000000  0000a776  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000590  00000000  00000000  0000bf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000400  00000000  00000000  0000c528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000079b0  00000000  00000000  0000c928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000070fb  00000000  00000000  000142d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cee33  00000000  00000000  0001b3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ea206  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001448  00000000  00000000  000ea24c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  000eb694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000028 	.word	0x20000028
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002364 	.word	0x08002364

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000002c 	.word	0x2000002c
 80001e8:	08002364 	.word	0x08002364

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96a 	b.w	80004d8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	460c      	mov	r4, r1
 8000224:	2b00      	cmp	r3, #0
 8000226:	d14e      	bne.n	80002c6 <__udivmoddi4+0xaa>
 8000228:	4694      	mov	ip, r2
 800022a:	458c      	cmp	ip, r1
 800022c:	4686      	mov	lr, r0
 800022e:	fab2 f282 	clz	r2, r2
 8000232:	d962      	bls.n	80002fa <__udivmoddi4+0xde>
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0320 	rsb	r3, r2, #32
 800023a:	4091      	lsls	r1, r2
 800023c:	fa20 f303 	lsr.w	r3, r0, r3
 8000240:	fa0c fc02 	lsl.w	ip, ip, r2
 8000244:	4319      	orrs	r1, r3
 8000246:	fa00 fe02 	lsl.w	lr, r0, r2
 800024a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800024e:	fa1f f68c 	uxth.w	r6, ip
 8000252:	fbb1 f4f7 	udiv	r4, r1, r7
 8000256:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800025a:	fb07 1114 	mls	r1, r7, r4, r1
 800025e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000262:	fb04 f106 	mul.w	r1, r4, r6
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000272:	f080 8112 	bcs.w	800049a <__udivmoddi4+0x27e>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 810f 	bls.w	800049a <__udivmoddi4+0x27e>
 800027c:	3c02      	subs	r4, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a59      	subs	r1, r3, r1
 8000282:	fa1f f38e 	uxth.w	r3, lr
 8000286:	fbb1 f0f7 	udiv	r0, r1, r7
 800028a:	fb07 1110 	mls	r1, r7, r0, r1
 800028e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000292:	fb00 f606 	mul.w	r6, r0, r6
 8000296:	429e      	cmp	r6, r3
 8000298:	d90a      	bls.n	80002b0 <__udivmoddi4+0x94>
 800029a:	eb1c 0303 	adds.w	r3, ip, r3
 800029e:	f100 31ff 	add.w	r1, r0, #4294967295
 80002a2:	f080 80fc 	bcs.w	800049e <__udivmoddi4+0x282>
 80002a6:	429e      	cmp	r6, r3
 80002a8:	f240 80f9 	bls.w	800049e <__udivmoddi4+0x282>
 80002ac:	4463      	add	r3, ip
 80002ae:	3802      	subs	r0, #2
 80002b0:	1b9b      	subs	r3, r3, r6
 80002b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa6>
 80002ba:	40d3      	lsrs	r3, r2
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xba>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb4>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x150>
 80002de:	42a3      	cmp	r3, r4
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xcc>
 80002e2:	4290      	cmp	r0, r2
 80002e4:	f0c0 80f0 	bcc.w	80004c8 <__udivmoddi4+0x2ac>
 80002e8:	1a86      	subs	r6, r0, r2
 80002ea:	eb64 0303 	sbc.w	r3, r4, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	2d00      	cmp	r5, #0
 80002f2:	d0e6      	beq.n	80002c2 <__udivmoddi4+0xa6>
 80002f4:	e9c5 6300 	strd	r6, r3, [r5]
 80002f8:	e7e3      	b.n	80002c2 <__udivmoddi4+0xa6>
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x204>
 8000300:	eba1 040c 	sub.w	r4, r1, ip
 8000304:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000308:	fa1f f78c 	uxth.w	r7, ip
 800030c:	2101      	movs	r1, #1
 800030e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000312:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000316:	fb08 4416 	mls	r4, r8, r6, r4
 800031a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800031e:	fb07 f006 	mul.w	r0, r7, r6
 8000322:	4298      	cmp	r0, r3
 8000324:	d908      	bls.n	8000338 <__udivmoddi4+0x11c>
 8000326:	eb1c 0303 	adds.w	r3, ip, r3
 800032a:	f106 34ff 	add.w	r4, r6, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x11a>
 8000330:	4298      	cmp	r0, r3
 8000332:	f200 80cd 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 8000336:	4626      	mov	r6, r4
 8000338:	1a1c      	subs	r4, r3, r0
 800033a:	fa1f f38e 	uxth.w	r3, lr
 800033e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000342:	fb08 4410 	mls	r4, r8, r0, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb00 f707 	mul.w	r7, r0, r7
 800034e:	429f      	cmp	r7, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x148>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f100 34ff 	add.w	r4, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x146>
 800035c:	429f      	cmp	r7, r3
 800035e:	f200 80b0 	bhi.w	80004c2 <__udivmoddi4+0x2a6>
 8000362:	4620      	mov	r0, r4
 8000364:	1bdb      	subs	r3, r3, r7
 8000366:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x9c>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa20 fc06 	lsr.w	ip, r0, r6
 800037c:	fa04 f301 	lsl.w	r3, r4, r1
 8000380:	ea43 030c 	orr.w	r3, r3, ip
 8000384:	40f4      	lsrs	r4, r6
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	0c38      	lsrs	r0, r7, #16
 800038c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000390:	fbb4 fef0 	udiv	lr, r4, r0
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	fb00 441e 	mls	r4, r0, lr, r4
 800039c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a0:	fb0e f90c 	mul.w	r9, lr, ip
 80003a4:	45a1      	cmp	r9, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d90a      	bls.n	80003c2 <__udivmoddi4+0x1a6>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003b2:	f080 8084 	bcs.w	80004be <__udivmoddi4+0x2a2>
 80003b6:	45a1      	cmp	r9, r4
 80003b8:	f240 8081 	bls.w	80004be <__udivmoddi4+0x2a2>
 80003bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c0:	443c      	add	r4, r7
 80003c2:	eba4 0409 	sub.w	r4, r4, r9
 80003c6:	fa1f f983 	uxth.w	r9, r3
 80003ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ce:	fb00 4413 	mls	r4, r0, r3, r4
 80003d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x1d2>
 80003de:	193c      	adds	r4, r7, r4
 80003e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80003e4:	d267      	bcs.n	80004b6 <__udivmoddi4+0x29a>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d965      	bls.n	80004b6 <__udivmoddi4+0x29a>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003f2:	fba0 9302 	umull	r9, r3, r0, r2
 80003f6:	eba4 040c 	sub.w	r4, r4, ip
 80003fa:	429c      	cmp	r4, r3
 80003fc:	46ce      	mov	lr, r9
 80003fe:	469c      	mov	ip, r3
 8000400:	d351      	bcc.n	80004a6 <__udivmoddi4+0x28a>
 8000402:	d04e      	beq.n	80004a2 <__udivmoddi4+0x286>
 8000404:	b155      	cbz	r5, 800041c <__udivmoddi4+0x200>
 8000406:	ebb8 030e 	subs.w	r3, r8, lr
 800040a:	eb64 040c 	sbc.w	r4, r4, ip
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	40cb      	lsrs	r3, r1
 8000414:	431e      	orrs	r6, r3
 8000416:	40cc      	lsrs	r4, r1
 8000418:	e9c5 6400 	strd	r6, r4, [r5]
 800041c:	2100      	movs	r1, #0
 800041e:	e750      	b.n	80002c2 <__udivmoddi4+0xa6>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f103 	lsr.w	r1, r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa24 f303 	lsr.w	r3, r4, r3
 8000430:	4094      	lsls	r4, r2
 8000432:	430c      	orrs	r4, r1
 8000434:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000438:	fa00 fe02 	lsl.w	lr, r0, r2
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	fbb3 f0f8 	udiv	r0, r3, r8
 8000444:	fb08 3110 	mls	r1, r8, r0, r3
 8000448:	0c23      	lsrs	r3, r4, #16
 800044a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044e:	fb00 f107 	mul.w	r1, r0, r7
 8000452:	4299      	cmp	r1, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x24c>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 36ff 	add.w	r6, r0, #4294967295
 800045e:	d22c      	bcs.n	80004ba <__udivmoddi4+0x29e>
 8000460:	4299      	cmp	r1, r3
 8000462:	d92a      	bls.n	80004ba <__udivmoddi4+0x29e>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1a5b      	subs	r3, r3, r1
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000470:	fb08 3311 	mls	r3, r8, r1, r3
 8000474:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000478:	fb01 f307 	mul.w	r3, r1, r7
 800047c:	42a3      	cmp	r3, r4
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x276>
 8000480:	eb1c 0404 	adds.w	r4, ip, r4
 8000484:	f101 36ff 	add.w	r6, r1, #4294967295
 8000488:	d213      	bcs.n	80004b2 <__udivmoddi4+0x296>
 800048a:	42a3      	cmp	r3, r4
 800048c:	d911      	bls.n	80004b2 <__udivmoddi4+0x296>
 800048e:	3902      	subs	r1, #2
 8000490:	4464      	add	r4, ip
 8000492:	1ae4      	subs	r4, r4, r3
 8000494:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000498:	e739      	b.n	800030e <__udivmoddi4+0xf2>
 800049a:	4604      	mov	r4, r0
 800049c:	e6f0      	b.n	8000280 <__udivmoddi4+0x64>
 800049e:	4608      	mov	r0, r1
 80004a0:	e706      	b.n	80002b0 <__udivmoddi4+0x94>
 80004a2:	45c8      	cmp	r8, r9
 80004a4:	d2ae      	bcs.n	8000404 <__udivmoddi4+0x1e8>
 80004a6:	ebb9 0e02 	subs.w	lr, r9, r2
 80004aa:	eb63 0c07 	sbc.w	ip, r3, r7
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7a8      	b.n	8000404 <__udivmoddi4+0x1e8>
 80004b2:	4631      	mov	r1, r6
 80004b4:	e7ed      	b.n	8000492 <__udivmoddi4+0x276>
 80004b6:	4603      	mov	r3, r0
 80004b8:	e799      	b.n	80003ee <__udivmoddi4+0x1d2>
 80004ba:	4630      	mov	r0, r6
 80004bc:	e7d4      	b.n	8000468 <__udivmoddi4+0x24c>
 80004be:	46d6      	mov	lr, sl
 80004c0:	e77f      	b.n	80003c2 <__udivmoddi4+0x1a6>
 80004c2:	4463      	add	r3, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e74d      	b.n	8000364 <__udivmoddi4+0x148>
 80004c8:	4606      	mov	r6, r0
 80004ca:	4623      	mov	r3, r4
 80004cc:	4608      	mov	r0, r1
 80004ce:	e70f      	b.n	80002f0 <__udivmoddi4+0xd4>
 80004d0:	3e02      	subs	r6, #2
 80004d2:	4463      	add	r3, ip
 80004d4:	e730      	b.n	8000338 <__udivmoddi4+0x11c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <EXTI0_IRQHandler>:
			config);
}


void EXTI0_IRQHandler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	//create function to allow for BALE to be detected automatically and assocaited logic according to flowchart!



}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <Delay_ms>:
    for(i = 0; i < (usec * 21); i++);

}

void Delay_ms( uint32_t msec )
{
 80004ea:	b480      	push	{r7}
 80004ec:	b085      	sub	sp, #20
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
    // To avoid delaying for less than usec, always round up.;
		uint32_t i = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < (msec * 21000); i++);
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
 80004fa:	e002      	b.n	8000502 <Delay_ms+0x18>
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	3301      	adds	r3, #1
 8000500:	60fb      	str	r3, [r7, #12]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	f245 2208 	movw	r2, #21000	@ 0x5208
 8000508:	fb02 f303 	mul.w	r3, r2, r3
 800050c:	68fa      	ldr	r2, [r7, #12]
 800050e:	429a      	cmp	r2, r3
 8000510:	d3f4      	bcc.n	80004fc <Delay_ms+0x12>

}
 8000512:	bf00      	nop
 8000514:	bf00      	nop
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr

08000520 <GPIOpin_init>:
 *                configuration.
 *
 * @return Initialised GPIOpin_t struct.
 **
 * =============================================================================== */
GPIOpin_t GPIOpin_init(GPIO_TypeDef *port, GPIO_Pin pin, GPIO_Config *config) {
 8000520:	b5b0      	push	{r4, r5, r7, lr}
 8000522:	b092      	sub	sp, #72	@ 0x48
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	4613      	mov	r3, r2
 800052e:	71fb      	strb	r3, [r7, #7]
  // Early return error struct if port is NULL
  if (port == NULL)
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	2b00      	cmp	r3, #0
 8000534:	d10a      	bne.n	800054c <GPIOpin_init+0x2c>
    return (GPIOpin_t){.port = NULL};
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	461a      	mov	r2, r3
 800053a:	2300      	movs	r3, #0
 800053c:	6013      	str	r3, [r2, #0]
 800053e:	6053      	str	r3, [r2, #4]
 8000540:	6093      	str	r3, [r2, #8]
 8000542:	60d3      	str	r3, [r2, #12]
 8000544:	6113      	str	r3, [r2, #16]
 8000546:	6153      	str	r3, [r2, #20]
 8000548:	6193      	str	r3, [r2, #24]
  // Update config and enable peripheral
  GPIOpin_updateConfig(&gpio, config);

  // Return the new GPIO struct
  return gpio;
}
 800054a:	e01c      	b.n	8000586 <GPIOpin_init+0x66>
  gpio.port         = port;
 800054c:	68bb      	ldr	r3, [r7, #8]
 800054e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio.pin          = pin;
 8000550:	79fb      	ldrb	r3, [r7, #7]
 8000552:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  gpio.set          = GPIOpin_set;
 8000556:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <GPIOpin_init+0x70>)
 8000558:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio.reset        = GPIOpin_reset;
 800055a:	4b0e      	ldr	r3, [pc, #56]	@ (8000594 <GPIOpin_init+0x74>)
 800055c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio.toggle       = GPIOpin_toggle;
 800055e:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <GPIOpin_init+0x78>)
 8000560:	643b      	str	r3, [r7, #64]	@ 0x40
  gpio.updateConfig = GPIOpin_updateConfig;
 8000562:	4b0e      	ldr	r3, [pc, #56]	@ (800059c <GPIOpin_init+0x7c>)
 8000564:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIOpin_updateConfig(&gpio, config);
 8000566:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800056a:	6839      	ldr	r1, [r7, #0]
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f8f7 	bl	8000760 <GPIOpin_updateConfig>
  return gpio;
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	461d      	mov	r5, r3
 8000576:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 800057a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800057c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800057e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000582:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8000586:	68f8      	ldr	r0, [r7, #12]
 8000588:	3748      	adds	r7, #72	@ 0x48
 800058a:	46bd      	mov	sp, r7
 800058c:	bdb0      	pop	{r4, r5, r7, pc}
 800058e:	bf00      	nop
 8000590:	080006d5 	.word	0x080006d5
 8000594:	08000703 	.word	0x08000703
 8000598:	08000733 	.word	0x08000733
 800059c:	08000761 	.word	0x08000761

080005a0 <_GPIOpin_init>:
 * @param   config Pointer to GPIO_Config struct for initial configuration.
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
static void _GPIOpin_init(GPIO_TypeDef *port, GPIO_Pin pin, GPIO_Config *config) {
 80005a0:	b480      	push	{r7}
 80005a2:	b087      	sub	sp, #28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	460b      	mov	r3, r1
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	72fb      	strb	r3, [r7, #11]

  // Get index of supplied port by subtracting GPIOA address and dividing by size
  int portIndex           = ((uint32_t)port - GPIOA_BASE) / GPIO_PERIPHERAL_SIZE;
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	f103 433f 	add.w	r3, r3, #3204448256	@ 0xbf000000
 80005b4:	f503 037e 	add.w	r3, r3, #16646144	@ 0xfe0000
 80005b8:	4a45      	ldr	r2, [pc, #276]	@ (80006d0 <_GPIOpin_init+0x130>)
 80005ba:	fba2 1203 	umull	r1, r2, r2, r3
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	085b      	lsrs	r3, r3, #1
 80005c2:	4413      	add	r3, r2
 80005c4:	0a5b      	lsrs	r3, r3, #9
 80005c6:	617b      	str	r3, [r7, #20]

  port->MODER            &= ~(0b11 << (2 * pin));                       // Clear MODER bits for pin
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	7afa      	ldrb	r2, [r7, #11]
 80005ce:	0052      	lsls	r2, r2, #1
 80005d0:	2103      	movs	r1, #3
 80005d2:	fa01 f202 	lsl.w	r2, r1, r2
 80005d6:	43d2      	mvns	r2, r2
 80005d8:	401a      	ands	r2, r3
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	601a      	str	r2, [r3, #0]
  port->MODER            |= (config->mode << (2 * pin));                // Shift in mode bits from config
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	7812      	ldrb	r2, [r2, #0]
 80005e6:	4611      	mov	r1, r2
 80005e8:	7afa      	ldrb	r2, [r7, #11]
 80005ea:	0052      	lsls	r2, r2, #1
 80005ec:	fa01 f202 	lsl.w	r2, r1, r2
 80005f0:	431a      	orrs	r2, r3
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	601a      	str	r2, [r3, #0]

  port->OTYPER           &= ~(0b01 << pin);                             // Clear OTYPE bits for pin
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	7afa      	ldrb	r2, [r7, #11]
 80005fc:	2101      	movs	r1, #1
 80005fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000602:	43d2      	mvns	r2, r2
 8000604:	401a      	ands	r2, r3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	605a      	str	r2, [r3, #4]
  port->OTYPER           |= (config->type << pin);                      // Shift in type bits from config
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	685b      	ldr	r3, [r3, #4]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	7852      	ldrb	r2, [r2, #1]
 8000612:	4611      	mov	r1, r2
 8000614:	7afa      	ldrb	r2, [r7, #11]
 8000616:	fa01 f202 	lsl.w	r2, r1, r2
 800061a:	431a      	orrs	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	605a      	str	r2, [r3, #4]

  port->OSPEEDR          &= ~(0b11 << (2 * pin));                       // Clear OSPEEDR bits for pin
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	7afa      	ldrb	r2, [r7, #11]
 8000626:	0052      	lsls	r2, r2, #1
 8000628:	2103      	movs	r1, #3
 800062a:	fa01 f202 	lsl.w	r2, r1, r2
 800062e:	43d2      	mvns	r2, r2
 8000630:	401a      	ands	r2, r3
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	609a      	str	r2, [r3, #8]
  port->OSPEEDR          |= (config->speed << (2 * pin));               // Shift in speed bits from config
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	687a      	ldr	r2, [r7, #4]
 800063c:	7892      	ldrb	r2, [r2, #2]
 800063e:	4611      	mov	r1, r2
 8000640:	7afa      	ldrb	r2, [r7, #11]
 8000642:	0052      	lsls	r2, r2, #1
 8000644:	fa01 f202 	lsl.w	r2, r1, r2
 8000648:	431a      	orrs	r2, r3
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	609a      	str	r2, [r3, #8]

  port->PUPDR            &= ~(0b11 << (2 * pin));                       // Clear PUPDR bits for pin
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	68db      	ldr	r3, [r3, #12]
 8000652:	7afa      	ldrb	r2, [r7, #11]
 8000654:	0052      	lsls	r2, r2, #1
 8000656:	2103      	movs	r1, #3
 8000658:	fa01 f202 	lsl.w	r2, r1, r2
 800065c:	43d2      	mvns	r2, r2
 800065e:	401a      	ands	r2, r3
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	60da      	str	r2, [r3, #12]
  port->PUPDR            |= (config->pupd << (2 * pin));                // Shift in pupd bits from config
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	68db      	ldr	r3, [r3, #12]
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	78d2      	ldrb	r2, [r2, #3]
 800066c:	4611      	mov	r1, r2
 800066e:	7afa      	ldrb	r2, [r7, #11]
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	fa01 f202 	lsl.w	r2, r1, r2
 8000676:	431a      	orrs	r2, r3
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	60da      	str	r2, [r3, #12]

  volatile uint32_t *afr  = (pin <= 7) ? &port->AFR[0] : &port->AFR[1]; // Select AFRL (pin<=7) or AFRH (pin>7)
 800067c:	7afb      	ldrb	r3, [r7, #11]
 800067e:	2b07      	cmp	r3, #7
 8000680:	d802      	bhi.n	8000688 <_GPIOpin_init+0xe8>
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	3320      	adds	r3, #32
 8000686:	e001      	b.n	800068c <_GPIOpin_init+0xec>
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	3324      	adds	r3, #36	@ 0x24
 800068c:	613b      	str	r3, [r7, #16]
  *afr                   &= ~(0b1111 << (4 * (pin & 7)));               // Clear AFR bits for pin
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	7afa      	ldrb	r2, [r7, #11]
 8000694:	f002 0207 	and.w	r2, r2, #7
 8000698:	0092      	lsls	r2, r2, #2
 800069a:	210f      	movs	r1, #15
 800069c:	fa01 f202 	lsl.w	r2, r1, r2
 80006a0:	43d2      	mvns	r2, r2
 80006a2:	401a      	ands	r2, r3
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	601a      	str	r2, [r3, #0]
  *afr                   |= (config->afr << (4 * (pin & 7)));           // Shift in afr bits from config
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	7912      	ldrb	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	7afa      	ldrb	r2, [r7, #11]
 80006b4:	f002 0207 	and.w	r2, r2, #7
 80006b8:	0092      	lsls	r2, r2, #2
 80006ba:	fa01 f202 	lsl.w	r2, r1, r2
 80006be:	431a      	orrs	r2, r3
 80006c0:	693b      	ldr	r3, [r7, #16]
 80006c2:	601a      	str	r2, [r3, #0]
}
 80006c4:	bf00      	nop
 80006c6:	371c      	adds	r7, #28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	00401005 	.word	0x00401005

080006d4 <GPIOpin_set>:
 * @param   gpio Pointer to GPIOpin_t struct.
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
void GPIOpin_set(GPIOpin_t *gpio) {
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  gpio->port->ODR |= (0b01 << gpio->pin);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	695a      	ldr	r2, [r3, #20]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	791b      	ldrb	r3, [r3, #4]
 80006e6:	4619      	mov	r1, r3
 80006e8:	2301      	movs	r3, #1
 80006ea:	408b      	lsls	r3, r1
 80006ec:	4619      	mov	r1, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	430a      	orrs	r2, r1
 80006f4:	615a      	str	r2, [r3, #20]
}
 80006f6:	bf00      	nop
 80006f8:	370c      	adds	r7, #12
 80006fa:	46bd      	mov	sp, r7
 80006fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000700:	4770      	bx	lr

08000702 <GPIOpin_reset>:
 * @param   gpio Pointer to GPIOpin_t struct.
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
void GPIOpin_reset(GPIOpin_t *gpio) {
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
  gpio->port->ODR &= ~(0b01 << gpio->pin);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	695a      	ldr	r2, [r3, #20]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	4619      	mov	r1, r3
 8000716:	2301      	movs	r3, #1
 8000718:	408b      	lsls	r3, r1
 800071a:	43db      	mvns	r3, r3
 800071c:	4619      	mov	r1, r3
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	400a      	ands	r2, r1
 8000724:	615a      	str	r2, [r3, #20]
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr

08000732 <GPIOpin_toggle>:
 * @param   gpio Pointer to GPIOpin_t struct.
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
void GPIOpin_toggle(GPIOpin_t *gpio) {
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
  gpio->port->ODR ^= (0b01 << gpio->pin);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	695a      	ldr	r2, [r3, #20]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	4619      	mov	r1, r3
 8000746:	2301      	movs	r3, #1
 8000748:	408b      	lsls	r3, r1
 800074a:	4619      	mov	r1, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	404a      	eors	r2, r1
 8000752:	615a      	str	r2, [r3, #20]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr

08000760 <GPIOpin_updateConfig>:
 * @param   gpio Pointer to GPIOpin_t struct.
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
void GPIOpin_updateConfig(GPIOpin_t *gpio, GPIO_Config *config) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
  // Initialise config with default values if passed NULL.
  if (config == NULL) {
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d10a      	bne.n	8000786 <GPIOpin_updateConfig+0x26>
    config = &GPIO_CONFIG_DEFAULT;
 8000770:	4a0e      	ldr	r2, [pc, #56]	@ (80007ac <GPIOpin_updateConfig+0x4c>)
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077a:	6018      	str	r0, [r3, #0]
 800077c:	3304      	adds	r3, #4
 800077e:	7019      	strb	r1, [r3, #0]
 8000780:	f107 0308 	add.w	r3, r7, #8
 8000784:	603b      	str	r3, [r7, #0]
  }

  // Update peripheral with new config
  gpio->config = *config;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	683a      	ldr	r2, [r7, #0]
 800078a:	3305      	adds	r3, #5
 800078c:	6811      	ldr	r1, [r2, #0]
 800078e:	6019      	str	r1, [r3, #0]
 8000790:	7912      	ldrb	r2, [r2, #4]
 8000792:	711a      	strb	r2, [r3, #4]

  // Initialise GPIO registers and enable peripheral
  _GPIOpin_init(gpio->port, gpio->pin, config);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	6818      	ldr	r0, [r3, #0]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	791b      	ldrb	r3, [r3, #4]
 800079c:	683a      	ldr	r2, [r7, #0]
 800079e:	4619      	mov	r1, r3
 80007a0:	f7ff fefe 	bl	80005a0 <_GPIOpin_init>
}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	0800237c 	.word	0x0800237c

080007b0 <SX1272_init>:
    SPI_t *spi,
    GPIOpin_t cs,
    SX1272_Bandwidth bw,
    SX1272_SpreadingFactor sf,
    SX1272_CodingRate cr
) {
 80007b0:	b082      	sub	sp, #8
 80007b2:	b5b0      	push	{r4, r5, r7, lr}
 80007b4:	b084      	sub	sp, #16
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	60f8      	str	r0, [r7, #12]
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
 80007be:	627b      	str	r3, [r7, #36]	@ 0x24
  lora->base         = spi;
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
  lora->cs           = cs;
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	1d1c      	adds	r4, r3, #4
 80007ca:	f107 0524 	add.w	r5, r7, #36	@ 0x24
 80007ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lora->standby      = SX1272_standby;
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	4a2d      	ldr	r2, [pc, #180]	@ (8000894 <SX1272_init+0xe4>)
 80007de:	629a      	str	r2, [r3, #40]	@ 0x28
  lora->enableBoost  = SX1272_enableBoost;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	4a2d      	ldr	r2, [pc, #180]	@ (8000898 <SX1272_init+0xe8>)
 80007e4:	625a      	str	r2, [r3, #36]	@ 0x24
  lora->transmit     = SX1272_transmit;
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	4a2c      	ldr	r2, [pc, #176]	@ (800089c <SX1272_init+0xec>)
 80007ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  lora->startReceive = SX1272_startReceive;
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	4a2c      	ldr	r2, [pc, #176]	@ (80008a0 <SX1272_init+0xf0>)
 80007f0:	631a      	str	r2, [r3, #48]	@ 0x30
  lora->readReceive  = SX1272_readReceive;
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	4a2b      	ldr	r2, [pc, #172]	@ (80008a4 <SX1272_init+0xf4>)
 80007f6:	635a      	str	r2, [r3, #52]	@ 0x34
  lora->clearIRQ     = SX1272_clearIRQ;
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	4a2b      	ldr	r2, [pc, #172]	@ (80008a8 <SX1272_init+0xf8>)
 80007fc:	639a      	str	r2, [r3, #56]	@ 0x38

  // Set mode to sleep
  _SX1272_setMode(lora, SX1272_MODE_SLEEP);
 80007fe:	2100      	movs	r1, #0
 8000800:	68b8      	ldr	r0, [r7, #8]
 8000802:	f000 f853 	bl	80008ac <_SX1272_setMode>

  /* clang-format off */
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE,
 8000806:	2280      	movs	r2, #128	@ 0x80
 8000808:	2101      	movs	r1, #1
 800080a:	68b8      	ldr	r0, [r7, #8]
 800080c:	f000 f940 	bl	8000a90 <SX1272_writeRegister>
     0x01 << SX1272_OP_MODE_LONG_RANGE_Pos  // Enable LoRa
  );

  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
    bw   << SX1272_REG_MODEM_CONFIG1_BW_Pos     // Set bandwidth
 8000810:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000814:	019b      	lsls	r3, r3, #6
  | cr   << SX1272_REG_MODEM_CONFIG1_CR_Pos     // Set coding rate
  | 0x00 << SX1272_REG_MODEM_CONFIG1_CRC_Pos    // Enable CRC
 8000816:	b25a      	sxtb	r2, r3
  | cr   << SX1272_REG_MODEM_CONFIG1_CR_Pos     // Set coding rate
 8000818:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800081c:	00db      	lsls	r3, r3, #3
  | 0x00 << SX1272_REG_MODEM_CONFIG1_CRC_Pos    // Enable CRC
 800081e:	b25b      	sxtb	r3, r3
 8000820:	4313      	orrs	r3, r2
 8000822:	b25b      	sxtb	r3, r3
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG1,
 8000824:	b2db      	uxtb	r3, r3
 8000826:	461a      	mov	r2, r3
 8000828:	211d      	movs	r1, #29
 800082a:	68b8      	ldr	r0, [r7, #8]
 800082c:	f000 f930 	bl	8000a90 <SX1272_writeRegister>
  /* clang-format on */

  // TODO: make this configurable in driver
  //
  // Set spreading factor
  SX1272_writeRegister(lora, SX1272_REG_MODEM_CONFIG2, 0x94);
 8000830:	2294      	movs	r2, #148	@ 0x94
 8000832:	211e      	movs	r1, #30
 8000834:	68b8      	ldr	r0, [r7, #8]
 8000836:	f000 f92b 	bl	8000a90 <SX1272_writeRegister>

  // Set payload length
  SX1272_writeRegister(lora, SX1272_REG_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 800083a:	2220      	movs	r2, #32
 800083c:	2122      	movs	r1, #34	@ 0x22
 800083e:	68b8      	ldr	r0, [r7, #8]
 8000840:	f000 f926 	bl	8000a90 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_MAX_PAYLOAD_LENGTH, LORA_MSG_LENGTH);
 8000844:	2220      	movs	r2, #32
 8000846:	2123      	movs	r1, #35	@ 0x23
 8000848:	68b8      	ldr	r0, [r7, #8]
 800084a:	f000 f921 	bl	8000a90 <SX1272_writeRegister>

  // TODO: make this configurable in driver
  //
  // Set FIFO base addresses
  SX1272_writeRegister(lora, SX1272_REG_FIFO_TX_BASE_ADDR, 0x00); // Tx starts at 0x00
 800084e:	2200      	movs	r2, #0
 8000850:	210e      	movs	r1, #14
 8000852:	68b8      	ldr	r0, [r7, #8]
 8000854:	f000 f91c 	bl	8000a90 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_RX_BASE_ADDR, 0x00); // Rx starts at 0x00
 8000858:	2200      	movs	r2, #0
 800085a:	210f      	movs	r1, #15
 800085c:	68b8      	ldr	r0, [r7, #8]
 800085e:	f000 f917 	bl	8000a90 <SX1272_writeRegister>

  // Set mode to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8000862:	2101      	movs	r1, #1
 8000864:	68b8      	ldr	r0, [r7, #8]
 8000866:	f000 f821 	bl	80008ac <_SX1272_setMode>

  return *lora;
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	4614      	mov	r4, r2
 8000870:	461d      	mov	r5, r3
 8000872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800087c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800087e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000882:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000890:	b002      	add	sp, #8
 8000892:	4770      	bx	lr
 8000894:	08000923 	.word	0x08000923
 8000898:	080008e9 	.word	0x080008e9
 800089c:	0800093b 	.word	0x0800093b
 80008a0:	080009ad 	.word	0x080009ad
 80008a4:	080009f9 	.word	0x080009f9
 80008a8:	08000a71 	.word	0x08000a71

080008ac <_SX1272_setMode>:
 * @param *lora        Pointer to LoRa struct.
 * @param mode         Desired operational mode to be set.
 * @return @c NULL.
 **
 * =============================================================================== */
void _SX1272_setMode(SX1272_t *lora, SX1272_Mode mode) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	460b      	mov	r3, r1
 80008b6:	70fb      	strb	r3, [r7, #3]
  uint8_t regOpMode = SX1272_readRegister(lora, SX1272_REG_OP_MODE);
 80008b8:	2101      	movs	r1, #1
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f91f 	bl	8000afe <SX1272_readRegister>
 80008c0:	4603      	mov	r3, r0
 80008c2:	73fb      	strb	r3, [r7, #15]
  regOpMode &= ~0x07; // Mask to mode bits
 80008c4:	7bfb      	ldrb	r3, [r7, #15]
 80008c6:	f023 0307 	bic.w	r3, r3, #7
 80008ca:	73fb      	strb	r3, [r7, #15]
  regOpMode |= mode;  // Set mode
 80008cc:	7bfa      	ldrb	r2, [r7, #15]
 80008ce:	78fb      	ldrb	r3, [r7, #3]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_OP_MODE, regOpMode);
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	461a      	mov	r2, r3
 80008d8:	2101      	movs	r1, #1
 80008da:	6878      	ldr	r0, [r7, #4]
 80008dc:	f000 f8d8 	bl	8000a90 <SX1272_writeRegister>
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <SX1272_enableBoost>:
 * @param altitude     Altitude value to be included in the packet.
 * @param velocity     Velocity value to be included in the packet.
 * @return             Constructed LoRa packet containing the provided data.
 **
 * =============================================================================== */
void SX1272_enableBoost(SX1272_t *lora, bool enable) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
 80008f0:	460b      	mov	r3, r1
 80008f2:	70fb      	strb	r3, [r7, #3]
  uint8_t regPaConfig  = SX1272_readRegister(lora, SX1272_REG_PA_CONFIG); // Read current config
 80008f4:	2109      	movs	r1, #9
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f000 f901 	bl	8000afe <SX1272_readRegister>
 80008fc:	4603      	mov	r3, r0
 80008fe:	73fb      	strb	r3, [r7, #15]
  regPaConfig         &= ~SX1272_PA_SELECT;                               // Mask out PA select bit
 8000900:	7bfb      	ldrb	r3, [r7, #15]
 8000902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000906:	73fb      	strb	r3, [r7, #15]
  SX1272_writeRegister(lora, SX1272_REG_PA_CONFIG, regPaConfig | SX1272_PA_SELECT);
 8000908:	7bfb      	ldrb	r3, [r7, #15]
 800090a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800090e:	b2db      	uxtb	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	2109      	movs	r1, #9
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f000 f8bb 	bl	8000a90 <SX1272_writeRegister>
}
 800091a:	bf00      	nop
 800091c:	3710      	adds	r7, #16
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <SX1272_standby>:
 * @param  *lora Pointer to LoRa struct.
 *
 * @return @c NULL.
 **
 * ============================================================================================== */
void SX1272_standby(SX1272_t *lora) {
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 800092a:	2101      	movs	r1, #1
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f7ff ffbd 	bl	80008ac <_SX1272_setMode>
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}

0800093a <SX1272_transmit>:
 *
 * @param lora         Pointer to SX1272 struct.
 * @param pointerdata  Pointer to the data to be transmitted.
 **
 * ============================================================================================== */
void SX1272_transmit(SX1272_t *lora, uint8_t *pointerdata) {
 800093a:	b580      	push	{r7, lr}
 800093c:	b084      	sub	sp, #16
 800093e:	af00      	add	r7, sp, #0
 8000940:	6078      	str	r0, [r7, #4]
 8000942:	6039      	str	r1, [r7, #0]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 8000944:	2101      	movs	r1, #1
 8000946:	6878      	ldr	r0, [r7, #4]
 8000948:	f7ff ffb0 	bl	80008ac <_SX1272_setMode>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to TxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_TXDONE);
 800094c:	2240      	movs	r2, #64	@ 0x40
 800094e:	2140      	movs	r1, #64	@ 0x40
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 f89d 	bl	8000a90 <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_TXDONE); // clears the IRQ flag
 8000956:	2208      	movs	r2, #8
 8000958:	2112      	movs	r1, #18
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f000 f898 	bl	8000a90 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // set pointer adddress to start
 8000960:	2200      	movs	r2, #0
 8000962:	210d      	movs	r1, #13
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f000 f893 	bl	8000a90 <SX1272_writeRegister>

  // Load data into transmit FIFO
  for (int i = 0; i < 32; i++) {
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e00b      	b.n	8000988 <SX1272_transmit+0x4e>
    SX1272_writeRegister(lora, SX1272_REG_FIFO, pointerdata[i]);
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	683a      	ldr	r2, [r7, #0]
 8000974:	4413      	add	r3, r2
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	2100      	movs	r1, #0
 800097c:	6878      	ldr	r0, [r7, #4]
 800097e:	f000 f887 	bl	8000a90 <SX1272_writeRegister>
  for (int i = 0; i < 32; i++) {
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	3301      	adds	r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	2b1f      	cmp	r3, #31
 800098c:	ddf0      	ble.n	8000970 <SX1272_transmit+0x36>
  }

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_TX;       // Set local mode setting
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2203      	movs	r2, #3
 8000992:	f883 2020 	strb.w	r2, [r3, #32]
  _SX1272_setMode(lora, lora->currentMode); // Start transmitting
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f893 3020 	ldrb.w	r3, [r3, #32]
 800099c:	4619      	mov	r1, r3
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f7ff ff84 	bl	80008ac <_SX1272_setMode>
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <SX1272_startReceive>:
 * @brief Begins continuous receive on the SX1272.
 *
 * @param lora Pointer to SX1272 struct.
 **
 * ============================================================================================== */
void SX1272_startReceive(SX1272_t *lora) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  // Set device to standby
  _SX1272_setMode(lora, SX1272_MODE_STDBY);
 80009b4:	2101      	movs	r1, #1
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff ff78 	bl	80008ac <_SX1272_setMode>

  // TODO: add in proper read-mask-write operation for setting DIO mapping
  //
  // Set DIO interrupt pin to RxDone
  SX1272_writeRegister(lora, SX1272_REG_DIO_MAPPING1, SX1272_LORA_DIO_RXDONE);
 80009bc:	2200      	movs	r2, #0
 80009be:	2140      	movs	r1, #64	@ 0x40
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f000 f865 	bl	8000a90 <SX1272_writeRegister>
  // TODO:
  // Think of a more elegant solution for applications that might use this
  // driver that want buffered data
  //
  // Clear IRQ flags and set FIFO address pointer.
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE); // Clear the IRQ flag
 80009c6:	2240      	movs	r2, #64	@ 0x40
 80009c8:	2112      	movs	r1, #18
 80009ca:	6878      	ldr	r0, [r7, #4]
 80009cc:	f000 f860 	bl	8000a90 <SX1272_writeRegister>
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, 0x00);               // Set pointer adddress to start
 80009d0:	2200      	movs	r2, #0
 80009d2:	210d      	movs	r1, #13
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 f85b 	bl	8000a90 <SX1272_writeRegister>

  // Update the current operating mode
  lora->currentMode = SX1272_MODE_RXCONTINUOUS; // Set local mode setting
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2205      	movs	r2, #5
 80009de:	f883 2020 	strb.w	r2, [r3, #32]
  _SX1272_setMode(lora, lora->currentMode);     // Start receiving
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009e8:	4619      	mov	r1, r3
 80009ea:	6878      	ldr	r0, [r7, #4]
 80009ec:	f7ff ff5e 	bl	80008ac <_SX1272_setMode>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SX1272_readReceive>:
 *
 * @return Boolean value indicating if a packet was successfully received and
 *         returned in buffer.
 **
 * ============================================================================================== */
bool SX1272_readReceive(SX1272_t *lora, uint8_t *buffer, uint8_t buffSize) {
 80009f8:	b590      	push	{r4, r7, lr}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	60f8      	str	r0, [r7, #12]
 8000a00:	60b9      	str	r1, [r7, #8]
 8000a02:	4613      	mov	r3, r2
 8000a04:	71fb      	strb	r3, [r7, #7]
  // starting the read. This is fine for cases where the user code carefully
  // manages the DIO interrupts, however ideally the method should check for
  // errors in the IRQ register and appropriately discard received packets.

  // Clear the IRQ flag
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, SX1272_LORA_IRQ_RXDONE);
 8000a06:	2240      	movs	r2, #64	@ 0x40
 8000a08:	2112      	movs	r1, #18
 8000a0a:	68f8      	ldr	r0, [r7, #12]
 8000a0c:	f000 f840 	bl	8000a90 <SX1272_writeRegister>

  // Read address and packet width information of received data
  uint8_t bytesReceived = SX1272_readRegister(lora, SX1272_REG_RX_BYTES);          // Number of bytes received
 8000a10:	2113      	movs	r1, #19
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f000 f873 	bl	8000afe <SX1272_readRegister>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	74fb      	strb	r3, [r7, #19]
  uint8_t rxCurrentAddr = SX1272_readRegister(lora, SX1272_REG_FIFO_RX_CURR_ADDR); // Address of last packet
 8000a1c:	2110      	movs	r1, #16
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f000 f86d 	bl	8000afe <SX1272_readRegister>
 8000a24:	4603      	mov	r3, r0
 8000a26:	74bb      	strb	r3, [r7, #18]

  // Return error if buffer is smaller than the received data
  if (bytesReceived > buffSize)
 8000a28:	7cfa      	ldrb	r2, [r7, #19]
 8000a2a:	79fb      	ldrb	r3, [r7, #7]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d901      	bls.n	8000a34 <SX1272_readReceive+0x3c>
    return false;
 8000a30:	2300      	movs	r3, #0
 8000a32:	e019      	b.n	8000a68 <SX1272_readReceive+0x70>

  // Otherwise, set the address pointer and read each byte into buffer
  SX1272_writeRegister(lora, SX1272_REG_FIFO_ADDR_PTR, rxCurrentAddr);
 8000a34:	7cbb      	ldrb	r3, [r7, #18]
 8000a36:	461a      	mov	r2, r3
 8000a38:	210d      	movs	r1, #13
 8000a3a:	68f8      	ldr	r0, [r7, #12]
 8000a3c:	f000 f828 	bl	8000a90 <SX1272_writeRegister>
  for (int i = 0; i < bytesReceived; i++) {
 8000a40:	2300      	movs	r3, #0
 8000a42:	617b      	str	r3, [r7, #20]
 8000a44:	e00b      	b.n	8000a5e <SX1272_readReceive+0x66>
    buffer[i] = SX1272_readRegister(lora, SX1272_REG_FIFO);
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	68ba      	ldr	r2, [r7, #8]
 8000a4a:	18d4      	adds	r4, r2, r3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f000 f855 	bl	8000afe <SX1272_readRegister>
 8000a54:	4603      	mov	r3, r0
 8000a56:	7023      	strb	r3, [r4, #0]
  for (int i = 0; i < bytesReceived; i++) {
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	3301      	adds	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	7cfb      	ldrb	r3, [r7, #19]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	429a      	cmp	r2, r3
 8000a64:	dbef      	blt.n	8000a46 <SX1272_readReceive+0x4e>
  }

  return true;
 8000a66:	2301      	movs	r3, #1
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	371c      	adds	r7, #28
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd90      	pop	{r4, r7, pc}

08000a70 <SX1272_clearIRQ>:
 * @param  flags 8-bit value representing flag bits to be set.
 *
 * @return @c NULL
 **
 * ============================================================================================== */
void SX1272_clearIRQ(SX1272_t *lora, uint8_t flags) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
  SX1272_writeRegister(lora, SX1272_REG_IRQ_FLAGS, flags);
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	2112      	movs	r1, #18
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f804 	bl	8000a90 <SX1272_writeRegister>
}
 8000a88:	bf00      	nop
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SX1272_writeRegister>:

/*************************************** INTERFACE METHODS ****************************************/

void SX1272_writeRegister(SX1272_t *lora, uint8_t address, uint8_t data) {
 8000a90:	b5b0      	push	{r4, r5, r7, lr}
 8000a92:	b08c      	sub	sp, #48	@ 0x30
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	460b      	mov	r3, r1
 8000a9a:	70fb      	strb	r3, [r7, #3]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	70bb      	strb	r3, [r7, #2]
  SPI_t *spi   = lora->base;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIOpin_t cs = lora->cs;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f107 040c 	add.w	r4, r7, #12
 8000aac:	1d1d      	adds	r5, r3, #4
 8000aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  // Pull CS low
  cs.reset(&cs);
 8000aba:	69fb      	ldr	r3, [r7, #28]
 8000abc:	f107 020c 	add.w	r2, r7, #12
 8000ac0:	4610      	mov	r0, r2
 8000ac2:	4798      	blx	r3

  // Send write data and address
  uint8_t payload = address | 0x80; // Load payload with address and write command
 8000ac4:	78fb      	ldrb	r3, [r7, #3]
 8000ac6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  spi->transmit(spi, payload);      // Transmit payload
 8000ace:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ad0:	691b      	ldr	r3, [r3, #16]
 8000ad2:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	4611      	mov	r1, r2
 8000ada:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000adc:	4798      	blx	r3
  spi->transmit(spi, data);         // Transmit write data
 8000ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	78ba      	ldrb	r2, [r7, #2]
 8000ae4:	b292      	uxth	r2, r2
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8000aea:	4798      	blx	r3

  // Set CS high
  cs.set(&cs);
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	f107 020c 	add.w	r2, r7, #12
 8000af2:	4610      	mov	r0, r2
 8000af4:	4798      	blx	r3
}
 8000af6:	bf00      	nop
 8000af8:	3730      	adds	r7, #48	@ 0x30
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bdb0      	pop	{r4, r5, r7, pc}

08000afe <SX1272_readRegister>:


uint8_t SX1272_readRegister(SX1272_t *lora, uint8_t address) {
 8000afe:	b5b0      	push	{r4, r5, r7, lr}
 8000b00:	b08c      	sub	sp, #48	@ 0x30
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70fb      	strb	r3, [r7, #3]
  uint8_t response = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  SPI_t *spi       = lora->base;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIOpin_t cs     = lora->cs;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	f107 0408 	add.w	r4, r7, #8
 8000b1c:	1d1d      	adds	r5, r3, #4
 8000b1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b22:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b26:	e884 0007 	stmia.w	r4, {r0, r1, r2}

  // Pull CS low
  cs.reset(&cs);
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	f107 0208 	add.w	r2, r7, #8
 8000b30:	4610      	mov	r0, r2
 8000b32:	4798      	blx	r3

  // Send write data and address
  uint8_t payload = address & 0x7F;              // Load payload with address and read command
 8000b34:	78fb      	ldrb	r3, [r7, #3]
 8000b36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  response        = spi->transmit(spi, payload); // Transmit payload
 8000b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b40:	691b      	ldr	r3, [r3, #16]
 8000b42:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8000b46:	b292      	uxth	r2, r2
 8000b48:	4611      	mov	r1, r2
 8000b4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b4c:	4798      	blx	r3
 8000b4e:	4603      	mov	r3, r0
 8000b50:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  response        = spi->transmit(spi, 0xFF);    // Transmit dummy data and reasd response
 8000b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b56:	691b      	ldr	r3, [r3, #16]
 8000b58:	21ff      	movs	r1, #255	@ 0xff
 8000b5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000b5c:	4798      	blx	r3
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  // Set CS high
  cs.set(&cs);
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	f107 0208 	add.w	r2, r7, #8
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4798      	blx	r3

  return response;
 8000b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3730      	adds	r7, #48	@ 0x30
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db0b      	blt.n	8000ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b8e:	79fb      	ldrb	r3, [r7, #7]
 8000b90:	f003 021f 	and.w	r2, r3, #31
 8000b94:	4907      	ldr	r1, [pc, #28]	@ (8000bb4 <__NVIC_EnableIRQ+0x38>)
 8000b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9a:	095b      	lsrs	r3, r3, #5
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	e000e100 	.word	0xe000e100

08000bb8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db12      	blt.n	8000bf0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	f003 021f 	and.w	r2, r3, #31
 8000bd0:	490a      	ldr	r1, [pc, #40]	@ (8000bfc <__NVIC_DisableIRQ+0x44>)
 8000bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd6:	095b      	lsrs	r3, r3, #5
 8000bd8:	2001      	movs	r0, #1
 8000bda:	fa00 f202 	lsl.w	r2, r0, r2
 8000bde:	3320      	adds	r3, #32
 8000be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000be4:	f3bf 8f4f 	dsb	sy
}
 8000be8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bea:	f3bf 8f6f 	isb	sy
}
 8000bee:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000e100 	.word	0xe000e100

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	b0a3      	sub	sp, #140	@ 0x8c
 8000c04:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c06:	f000 fdb5 	bl	8001774 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c0a:	f000 fa1d 	bl	8001048 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  RCC_START_PERIPHERAL(AHB1, GPIOA);
 8000c0e:	4b96      	ldr	r3, [pc, #600]	@ (8000e68 <main+0x268>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a95      	ldr	r2, [pc, #596]	@ (8000e68 <main+0x268>)
 8000c14:	f043 0301 	orr.w	r3, r3, #1
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b93      	ldr	r3, [pc, #588]	@ (8000e68 <main+0x268>)
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	4a92      	ldr	r2, [pc, #584]	@ (8000e68 <main+0x268>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6113      	str	r3, [r2, #16]
 8000c26:	bf00      	nop
 8000c28:	bf00      	nop
 8000c2a:	4b8f      	ldr	r3, [pc, #572]	@ (8000e68 <main+0x268>)
 8000c2c:	691b      	ldr	r3, [r3, #16]
 8000c2e:	4a8e      	ldr	r2, [pc, #568]	@ (8000e68 <main+0x268>)
 8000c30:	f023 0301 	bic.w	r3, r3, #1
 8000c34:	6113      	str	r3, [r2, #16]
  RCC_START_PERIPHERAL(AHB1, GPIOB);
 8000c36:	4b8c      	ldr	r3, [pc, #560]	@ (8000e68 <main+0x268>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a8b      	ldr	r2, [pc, #556]	@ (8000e68 <main+0x268>)
 8000c3c:	f043 0302 	orr.w	r3, r3, #2
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b89      	ldr	r3, [pc, #548]	@ (8000e68 <main+0x268>)
 8000c44:	691b      	ldr	r3, [r3, #16]
 8000c46:	4a88      	ldr	r2, [pc, #544]	@ (8000e68 <main+0x268>)
 8000c48:	f043 0302 	orr.w	r3, r3, #2
 8000c4c:	6113      	str	r3, [r2, #16]
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	4b85      	ldr	r3, [pc, #532]	@ (8000e68 <main+0x268>)
 8000c54:	691b      	ldr	r3, [r3, #16]
 8000c56:	4a84      	ldr	r2, [pc, #528]	@ (8000e68 <main+0x268>)
 8000c58:	f023 0302 	bic.w	r3, r3, #2
 8000c5c:	6113      	str	r3, [r2, #16]
  RCC_START_PERIPHERAL(AHB1, GPIOC);
 8000c5e:	4b82      	ldr	r3, [pc, #520]	@ (8000e68 <main+0x268>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a81      	ldr	r2, [pc, #516]	@ (8000e68 <main+0x268>)
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8000e68 <main+0x268>)
 8000c6c:	691b      	ldr	r3, [r3, #16]
 8000c6e:	4a7e      	ldr	r2, [pc, #504]	@ (8000e68 <main+0x268>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6113      	str	r3, [r2, #16]
 8000c76:	bf00      	nop
 8000c78:	bf00      	nop
 8000c7a:	4b7b      	ldr	r3, [pc, #492]	@ (8000e68 <main+0x268>)
 8000c7c:	691b      	ldr	r3, [r3, #16]
 8000c7e:	4a7a      	ldr	r2, [pc, #488]	@ (8000e68 <main+0x268>)
 8000c80:	f023 0304 	bic.w	r3, r3, #4
 8000c84:	6113      	str	r3, [r2, #16]
  RCC_START_PERIPHERAL(AHB1, GPIOD);
 8000c86:	4b78      	ldr	r3, [pc, #480]	@ (8000e68 <main+0x268>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a77      	ldr	r2, [pc, #476]	@ (8000e68 <main+0x268>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b75      	ldr	r3, [pc, #468]	@ (8000e68 <main+0x268>)
 8000c94:	691b      	ldr	r3, [r3, #16]
 8000c96:	4a74      	ldr	r2, [pc, #464]	@ (8000e68 <main+0x268>)
 8000c98:	f043 0308 	orr.w	r3, r3, #8
 8000c9c:	6113      	str	r3, [r2, #16]
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	4b71      	ldr	r3, [pc, #452]	@ (8000e68 <main+0x268>)
 8000ca4:	691b      	ldr	r3, [r3, #16]
 8000ca6:	4a70      	ldr	r2, [pc, #448]	@ (8000e68 <main+0x268>)
 8000ca8:	f023 0308 	bic.w	r3, r3, #8
 8000cac:	6113      	str	r3, [r2, #16]
  RCC_START_PERIPHERAL(AHB1, GPIOE);
 8000cae:	4b6e      	ldr	r3, [pc, #440]	@ (8000e68 <main+0x268>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a6d      	ldr	r2, [pc, #436]	@ (8000e68 <main+0x268>)
 8000cb4:	f043 0310 	orr.w	r3, r3, #16
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b6b      	ldr	r3, [pc, #428]	@ (8000e68 <main+0x268>)
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	4a6a      	ldr	r2, [pc, #424]	@ (8000e68 <main+0x268>)
 8000cc0:	f043 0310 	orr.w	r3, r3, #16
 8000cc4:	6113      	str	r3, [r2, #16]
 8000cc6:	bf00      	nop
 8000cc8:	bf00      	nop
 8000cca:	4b67      	ldr	r3, [pc, #412]	@ (8000e68 <main+0x268>)
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	4a66      	ldr	r2, [pc, #408]	@ (8000e68 <main+0x268>)
 8000cd0:	f023 0310 	bic.w	r3, r3, #16
 8000cd4:	6113      	str	r3, [r2, #16]
  RCC_START_PERIPHERAL(AHB1, GPIOF);
 8000cd6:	4b64      	ldr	r3, [pc, #400]	@ (8000e68 <main+0x268>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	4a63      	ldr	r2, [pc, #396]	@ (8000e68 <main+0x268>)
 8000cdc:	f043 0320 	orr.w	r3, r3, #32
 8000ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce2:	4b61      	ldr	r3, [pc, #388]	@ (8000e68 <main+0x268>)
 8000ce4:	691b      	ldr	r3, [r3, #16]
 8000ce6:	4a60      	ldr	r2, [pc, #384]	@ (8000e68 <main+0x268>)
 8000ce8:	f043 0320 	orr.w	r3, r3, #32
 8000cec:	6113      	str	r3, [r2, #16]
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	4b5d      	ldr	r3, [pc, #372]	@ (8000e68 <main+0x268>)
 8000cf4:	691b      	ldr	r3, [r3, #16]
 8000cf6:	4a5c      	ldr	r2, [pc, #368]	@ (8000e68 <main+0x268>)
 8000cf8:	f023 0320 	bic.w	r3, r3, #32
 8000cfc:	6113      	str	r3, [r2, #16]
  RCC_START_PERIPHERAL(AHB1, GPIOG);
 8000cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8000e68 <main+0x268>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d02:	4a59      	ldr	r2, [pc, #356]	@ (8000e68 <main+0x268>)
 8000d04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0a:	4b57      	ldr	r3, [pc, #348]	@ (8000e68 <main+0x268>)
 8000d0c:	691b      	ldr	r3, [r3, #16]
 8000d0e:	4a56      	ldr	r2, [pc, #344]	@ (8000e68 <main+0x268>)
 8000d10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d14:	6113      	str	r3, [r2, #16]
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	4b53      	ldr	r3, [pc, #332]	@ (8000e68 <main+0x268>)
 8000d1c:	691b      	ldr	r3, [r3, #16]
 8000d1e:	4a52      	ldr	r2, [pc, #328]	@ (8000e68 <main+0x268>)
 8000d20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000d24:	6113      	str	r3, [r2, #16]
  RCC_START_PERIPHERAL(AHB1, GPIOH);
 8000d26:	4b50      	ldr	r3, [pc, #320]	@ (8000e68 <main+0x268>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a4f      	ldr	r2, [pc, #316]	@ (8000e68 <main+0x268>)
 8000d2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b4d      	ldr	r3, [pc, #308]	@ (8000e68 <main+0x268>)
 8000d34:	691b      	ldr	r3, [r3, #16]
 8000d36:	4a4c      	ldr	r2, [pc, #304]	@ (8000e68 <main+0x268>)
 8000d38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d3c:	6113      	str	r3, [r2, #16]
 8000d3e:	bf00      	nop
 8000d40:	bf00      	nop
 8000d42:	4b49      	ldr	r3, [pc, #292]	@ (8000e68 <main+0x268>)
 8000d44:	691b      	ldr	r3, [r3, #16]
 8000d46:	4a48      	ldr	r2, [pc, #288]	@ (8000e68 <main+0x268>)
 8000d48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000d4c:	6113      	str	r3, [r2, #16]
  RCC_START_PERIPHERAL(AHB1, GPIOI);
 8000d4e:	4b46      	ldr	r3, [pc, #280]	@ (8000e68 <main+0x268>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d52:	4a45      	ldr	r2, [pc, #276]	@ (8000e68 <main+0x268>)
 8000d54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5a:	4b43      	ldr	r3, [pc, #268]	@ (8000e68 <main+0x268>)
 8000d5c:	691b      	ldr	r3, [r3, #16]
 8000d5e:	4a42      	ldr	r2, [pc, #264]	@ (8000e68 <main+0x268>)
 8000d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d64:	6113      	str	r3, [r2, #16]
 8000d66:	bf00      	nop
 8000d68:	bf00      	nop
 8000d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e68 <main+0x268>)
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	4a3e      	ldr	r2, [pc, #248]	@ (8000e68 <main+0x268>)
 8000d70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000d74:	6113      	str	r3, [r2, #16]
  RCC_START_PERIPHERAL(AHB1, GPIOJ);
 8000d76:	4b3c      	ldr	r3, [pc, #240]	@ (8000e68 <main+0x268>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a3b      	ldr	r2, [pc, #236]	@ (8000e68 <main+0x268>)
 8000d7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b39      	ldr	r3, [pc, #228]	@ (8000e68 <main+0x268>)
 8000d84:	691b      	ldr	r3, [r3, #16]
 8000d86:	4a38      	ldr	r2, [pc, #224]	@ (8000e68 <main+0x268>)
 8000d88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d8c:	6113      	str	r3, [r2, #16]
 8000d8e:	bf00      	nop
 8000d90:	bf00      	nop
 8000d92:	4b35      	ldr	r3, [pc, #212]	@ (8000e68 <main+0x268>)
 8000d94:	691b      	ldr	r3, [r3, #16]
 8000d96:	4a34      	ldr	r2, [pc, #208]	@ (8000e68 <main+0x268>)
 8000d98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000d9c:	6113      	str	r3, [r2, #16]
  RCC_START_PERIPHERAL(AHB1, GPIOK);
 8000d9e:	4b32      	ldr	r3, [pc, #200]	@ (8000e68 <main+0x268>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a31      	ldr	r2, [pc, #196]	@ (8000e68 <main+0x268>)
 8000da4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b2f      	ldr	r3, [pc, #188]	@ (8000e68 <main+0x268>)
 8000dac:	691b      	ldr	r3, [r3, #16]
 8000dae:	4a2e      	ldr	r2, [pc, #184]	@ (8000e68 <main+0x268>)
 8000db0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000db4:	6113      	str	r3, [r2, #16]
 8000db6:	bf00      	nop
 8000db8:	bf00      	nop
 8000dba:	4b2b      	ldr	r3, [pc, #172]	@ (8000e68 <main+0x268>)
 8000dbc:	691b      	ldr	r3, [r3, #16]
 8000dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8000e68 <main+0x268>)
 8000dc0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000dc4:	6113      	str	r3, [r2, #16]
  RCC_START_PERIPHERAL(AHB1, DMA1);
 8000dc6:	4b28      	ldr	r3, [pc, #160]	@ (8000e68 <main+0x268>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a27      	ldr	r2, [pc, #156]	@ (8000e68 <main+0x268>)
 8000dcc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b25      	ldr	r3, [pc, #148]	@ (8000e68 <main+0x268>)
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	4a24      	ldr	r2, [pc, #144]	@ (8000e68 <main+0x268>)
 8000dd8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ddc:	6113      	str	r3, [r2, #16]
 8000dde:	bf00      	nop
 8000de0:	bf00      	nop
 8000de2:	4b21      	ldr	r3, [pc, #132]	@ (8000e68 <main+0x268>)
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	4a20      	ldr	r2, [pc, #128]	@ (8000e68 <main+0x268>)
 8000de8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000dec:	6113      	str	r3, [r2, #16]

  RCC_START_PERIPHERAL(APB2, SPI1);
 8000dee:	4b1e      	ldr	r3, [pc, #120]	@ (8000e68 <main+0x268>)
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	4a1d      	ldr	r2, [pc, #116]	@ (8000e68 <main+0x268>)
 8000df4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <main+0x268>)
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8000e68 <main+0x268>)
 8000e00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e04:	6253      	str	r3, [r2, #36]	@ 0x24
 8000e06:	bf00      	nop
 8000e08:	bf00      	nop
 8000e0a:	4b17      	ldr	r3, [pc, #92]	@ (8000e68 <main+0x268>)
 8000e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e0e:	4a16      	ldr	r2, [pc, #88]	@ (8000e68 <main+0x268>)
 8000e10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000e14:	6253      	str	r3, [r2, #36]	@ 0x24
  RCC_START_PERIPHERAL(APB2, SYSCFG);
 8000e16:	4b14      	ldr	r3, [pc, #80]	@ (8000e68 <main+0x268>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e1a:	4a13      	ldr	r2, [pc, #76]	@ (8000e68 <main+0x268>)
 8000e1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e22:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <main+0x268>)
 8000e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e26:	4a10      	ldr	r2, [pc, #64]	@ (8000e68 <main+0x268>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2c:	6253      	str	r3, [r2, #36]	@ 0x24
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	4b0d      	ldr	r3, [pc, #52]	@ (8000e68 <main+0x268>)
 8000e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e36:	4a0c      	ldr	r2, [pc, #48]	@ (8000e68 <main+0x268>)
 8000e38:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000e3c:	6253      	str	r3, [r2, #36]	@ 0x24
  RCC_START_PERIPHERAL(APB2, TIM1);
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <main+0x268>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a09      	ldr	r2, [pc, #36]	@ (8000e68 <main+0x268>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4a:	4b07      	ldr	r3, [pc, #28]	@ (8000e68 <main+0x268>)
 8000e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e4e:	4a06      	ldr	r2, [pc, #24]	@ (8000e68 <main+0x268>)
 8000e50:	f043 0301 	orr.w	r3, r3, #1
 8000e54:	6253      	str	r3, [r2, #36]	@ 0x24
 8000e56:	bf00      	nop
 8000e58:	bf00      	nop
 8000e5a:	4b03      	ldr	r3, [pc, #12]	@ (8000e68 <main+0x268>)
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5e:	4a02      	ldr	r2, [pc, #8]	@ (8000e68 <main+0x268>)
 8000e60:	f023 0301 	bic.w	r3, r3, #1
 8000e64:	e002      	b.n	8000e6c <main+0x26c>
 8000e66:	bf00      	nop
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	6253      	str	r3, [r2, #36]	@ 0x24
  RCC_START_PERIPHERAL(APB2, TIM1);
 8000e6e:	4b66      	ldr	r3, [pc, #408]	@ (8001008 <main+0x408>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e72:	4a65      	ldr	r2, [pc, #404]	@ (8001008 <main+0x408>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e7a:	4b63      	ldr	r3, [pc, #396]	@ (8001008 <main+0x408>)
 8000e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e7e:	4a62      	ldr	r2, [pc, #392]	@ (8001008 <main+0x408>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6253      	str	r3, [r2, #36]	@ 0x24
 8000e86:	bf00      	nop
 8000e88:	bf00      	nop
 8000e8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001008 <main+0x408>)
 8000e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e8e:	4a5e      	ldr	r2, [pc, #376]	@ (8001008 <main+0x408>)
 8000e90:	f023 0301 	bic.w	r3, r3, #1
 8000e94:	6253      	str	r3, [r2, #36]	@ 0x24


  RCC_START_PERIPHERAL(APB1, TIM4);
 8000e96:	4b5c      	ldr	r3, [pc, #368]	@ (8001008 <main+0x408>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	4a5b      	ldr	r2, [pc, #364]	@ (8001008 <main+0x408>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ea2:	4b59      	ldr	r3, [pc, #356]	@ (8001008 <main+0x408>)
 8000ea4:	6a1b      	ldr	r3, [r3, #32]
 8000ea6:	4a58      	ldr	r2, [pc, #352]	@ (8001008 <main+0x408>)
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6213      	str	r3, [r2, #32]
 8000eae:	bf00      	nop
 8000eb0:	bf00      	nop
 8000eb2:	4b55      	ldr	r3, [pc, #340]	@ (8001008 <main+0x408>)
 8000eb4:	6a1b      	ldr	r3, [r3, #32]
 8000eb6:	4a54      	ldr	r2, [pc, #336]	@ (8001008 <main+0x408>)
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	6213      	str	r3, [r2, #32]
  RCC_START_PERIPHERAL(APB1, USART3); //UART 4 also (same pins)
 8000ebe:	4b52      	ldr	r3, [pc, #328]	@ (8001008 <main+0x408>)
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec2:	4a51      	ldr	r2, [pc, #324]	@ (8001008 <main+0x408>)
 8000ec4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eca:	4b4f      	ldr	r3, [pc, #316]	@ (8001008 <main+0x408>)
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	4a4e      	ldr	r2, [pc, #312]	@ (8001008 <main+0x408>)
 8000ed0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ed4:	6213      	str	r3, [r2, #32]
 8000ed6:	bf00      	nop
 8000ed8:	bf00      	nop
 8000eda:	4b4b      	ldr	r3, [pc, #300]	@ (8001008 <main+0x408>)
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	4a4a      	ldr	r2, [pc, #296]	@ (8001008 <main+0x408>)
 8000ee0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ee4:	6213      	str	r3, [r2, #32]

  Delay_ms(100);
 8000ee6:	2064      	movs	r0, #100	@ 0x64
 8000ee8:	f7ff faff 	bl	80004ea <Delay_ms>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f000 f91c 	bl	8001128 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
   LED1 = GPIOpin_init(GPIOJ, 0, &LED1_config);
 8000ef0:	4c46      	ldr	r4, [pc, #280]	@ (800100c <main+0x40c>)
 8000ef2:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000ef6:	4b46      	ldr	r3, [pc, #280]	@ (8001010 <main+0x410>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	4946      	ldr	r1, [pc, #280]	@ (8001014 <main+0x414>)
 8000efc:	f7ff fb10 	bl	8000520 <GPIOpin_init>
 8000f00:	4625      	mov	r5, r4
 8000f02:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000f06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f0a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f0e:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  //LORA Configuration!*****************************************************************
  LORA_CS = GPIOpin_init(GPIOC, 5, &LoRa_CS_config); //PC5
 8000f12:	4c41      	ldr	r4, [pc, #260]	@ (8001018 <main+0x418>)
 8000f14:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000f18:	4b40      	ldr	r3, [pc, #256]	@ (800101c <main+0x41c>)
 8000f1a:	2205      	movs	r2, #5
 8000f1c:	4940      	ldr	r1, [pc, #256]	@ (8001020 <main+0x420>)
 8000f1e:	f7ff faff 	bl	8000520 <GPIOpin_init>
 8000f22:	4625      	mov	r5, r4
 8000f24:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f30:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  DIO_0 = GPIOpin_init(GPIOA, 3, &LoRA_DIO0_config); //PA3
 8000f34:	4c3b      	ldr	r4, [pc, #236]	@ (8001024 <main+0x424>)
 8000f36:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8000f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001028 <main+0x428>)
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	493b      	ldr	r1, [pc, #236]	@ (800102c <main+0x42c>)
 8000f40:	f7ff faee 	bl	8000520 <GPIOpin_init>
 8000f44:	4625      	mov	r5, r4
 8000f46:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000f4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f4e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f52:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 spi_lora = SPI_init(SPI1, &spi_config); //SPI1 config for LoRa
 8000f56:	4c36      	ldr	r4, [pc, #216]	@ (8001030 <main+0x430>)
 8000f58:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f5c:	4a35      	ldr	r2, [pc, #212]	@ (8001034 <main+0x434>)
 8000f5e:	4936      	ldr	r1, [pc, #216]	@ (8001038 <main+0x438>)
 8000f60:	4618      	mov	r0, r3
 8000f62:	f000 fa3b 	bl	80013dc <SPI_init>
 8000f66:	4625      	mov	r5, r4
 8000f68:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8000f6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f74:	e885 0003 	stmia.w	r5, {r0, r1}
  SX1272_init(&lora, &spi_lora,LORA_CS, SX1272_BW500, SX1272_SF9, SX1272_CR5);
 8000f78:	46bc      	mov	ip, r7
 8000f7a:	4e27      	ldr	r6, [pc, #156]	@ (8001018 <main+0x418>)
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	9308      	str	r3, [sp, #32]
 8000f80:	2309      	movs	r3, #9
 8000f82:	9307      	str	r3, [sp, #28]
 8000f84:	2302      	movs	r3, #2
 8000f86:	9306      	str	r3, [sp, #24]
 8000f88:	466d      	mov	r5, sp
 8000f8a:	1d34      	adds	r4, r6, #4
 8000f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f94:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f98:	6833      	ldr	r3, [r6, #0]
 8000f9a:	4a25      	ldr	r2, [pc, #148]	@ (8001030 <main+0x430>)
 8000f9c:	4927      	ldr	r1, [pc, #156]	@ (800103c <main+0x43c>)
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	f7ff fc06 	bl	80007b0 <SX1272_init>
  SX1272_startReceive(&lora); //default state will be to receive -> interr
 8000fa4:	4825      	ldr	r0, [pc, #148]	@ (800103c <main+0x43c>)
 8000fa6:	f7ff fd01 	bl	80009ac <SX1272_startReceive>



	SYSCFG->EXTICR[0] &= ~SYSCFG_EXTICR1_EXTI3_PA;
 8000faa:	4b25      	ldr	r3, [pc, #148]	@ (8001040 <main+0x440>)
 8000fac:	4a24      	ldr	r2, [pc, #144]	@ (8001040 <main+0x440>)
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	6093      	str	r3, [r2, #8]
	SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PA;
 8000fb2:	4b23      	ldr	r3, [pc, #140]	@ (8001040 <main+0x440>)
 8000fb4:	4a22      	ldr	r2, [pc, #136]	@ (8001040 <main+0x440>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &= ~EXTI_FTSR_TR3;
 8000fba:	4b22      	ldr	r3, [pc, #136]	@ (8001044 <main+0x444>)
 8000fbc:	68db      	ldr	r3, [r3, #12]
 8000fbe:	4a21      	ldr	r2, [pc, #132]	@ (8001044 <main+0x444>)
 8000fc0:	f023 0308 	bic.w	r3, r3, #8
 8000fc4:	60d3      	str	r3, [r2, #12]
	EXTI->FTSR |= EXTI_RTSR_TR3;
 8000fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8001044 <main+0x444>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	4a1e      	ldr	r2, [pc, #120]	@ (8001044 <main+0x444>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	60d3      	str	r3, [r2, #12]
	EXTI->RTSR &= ~EXTI_RTSR_TR3;
 8000fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8001044 <main+0x444>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <main+0x444>)
 8000fd8:	f023 0308 	bic.w	r3, r3, #8
 8000fdc:	6093      	str	r3, [r2, #8]
	EXTI->RTSR |= EXTI_FTSR_TR3;
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <main+0x444>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	4a18      	ldr	r2, [pc, #96]	@ (8001044 <main+0x444>)
 8000fe4:	f043 0308 	orr.w	r3, r3, #8
 8000fe8:	6093      	str	r3, [r2, #8]
	EXTI->IMR &= ~EXTI_IMR_MR3;
 8000fea:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <main+0x444>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a15      	ldr	r2, [pc, #84]	@ (8001044 <main+0x444>)
 8000ff0:	f023 0308 	bic.w	r3, r3, #8
 8000ff4:	6013      	str	r3, [r2, #0]
	EXTI->IMR |= EXTI_IMR_MR3;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <main+0x444>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a12      	ldr	r2, [pc, #72]	@ (8001044 <main+0x444>)
 8000ffc:	f043 0308 	orr.w	r3, r3, #8
 8001000:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001002:	bf00      	nop
 8001004:	e7fd      	b.n	8001002 <main+0x402>
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	20000174 	.word	0x20000174
 8001010:	20000014 	.word	0x20000014
 8001014:	40022400 	.word	0x40022400
 8001018:	200000d4 	.word	0x200000d4
 800101c:	20000004 	.word	0x20000004
 8001020:	40020800 	.word	0x40020800
 8001024:	200000b8 	.word	0x200000b8
 8001028:	2000000c 	.word	0x2000000c
 800102c:	40020000 	.word	0x40020000
 8001030:	200000a0 	.word	0x200000a0
 8001034:	20000000 	.word	0x20000000
 8001038:	40013000 	.word	0x40013000
 800103c:	20000064 	.word	0x20000064
 8001040:	40013800 	.word	0x40013800
 8001044:	40013c00 	.word	0x40013c00

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b094      	sub	sp, #80	@ 0x50
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	2230      	movs	r2, #48	@ 0x30
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f001 f958 	bl	800230c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	f107 030c 	add.w	r3, r7, #12
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	4b2b      	ldr	r3, [pc, #172]	@ (8001120 <SystemClock_Config+0xd8>)
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	4a2a      	ldr	r2, [pc, #168]	@ (8001120 <SystemClock_Config+0xd8>)
 8001076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107a:	6413      	str	r3, [r2, #64]	@ 0x40
 800107c:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <SystemClock_Config+0xd8>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	4b25      	ldr	r3, [pc, #148]	@ (8001124 <SystemClock_Config+0xdc>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a24      	ldr	r2, [pc, #144]	@ (8001124 <SystemClock_Config+0xdc>)
 8001092:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <SystemClock_Config+0xdc>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010a4:	2301      	movs	r3, #1
 80010a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ae:	2302      	movs	r3, #2
 80010b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80010b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80010b8:	230f      	movs	r3, #15
 80010ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010bc:	23d8      	movs	r3, #216	@ 0xd8
 80010be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010c4:	2304      	movs	r3, #4
 80010c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c8:	f107 0320 	add.w	r3, r7, #32
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fcf9 	bl	8001ac4 <HAL_RCC_OscConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010d8:	f000 f979 	bl	80013ce <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010dc:	f000 fca2 	bl	8001a24 <HAL_PWREx_EnableOverDrive>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80010e6:	f000 f972 	bl	80013ce <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ea:	230f      	movs	r3, #15
 80010ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ee:	2302      	movs	r3, #2
 80010f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001100:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001102:	f107 030c 	add.w	r3, r7, #12
 8001106:	2105      	movs	r1, #5
 8001108:	4618      	mov	r0, r3
 800110a:	f000 ff53 	bl	8001fb4 <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001114:	f000 f95b 	bl	80013ce <Error_Handler>
  }
}
 8001118:	bf00      	nop
 800111a:	3750      	adds	r7, #80	@ 0x50
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40023800 	.word	0x40023800
 8001124:	40007000 	.word	0x40007000

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	4b1e      	ldr	r3, [pc, #120]	@ (80011ac <MX_GPIO_Init+0x84>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001136:	4a1d      	ldr	r2, [pc, #116]	@ (80011ac <MX_GPIO_Init+0x84>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	@ 0x30
 800113e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ac <MX_GPIO_Init+0x84>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	4b17      	ldr	r3, [pc, #92]	@ (80011ac <MX_GPIO_Init+0x84>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	4a16      	ldr	r2, [pc, #88]	@ (80011ac <MX_GPIO_Init+0x84>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6313      	str	r3, [r2, #48]	@ 0x30
 800115a:	4b14      	ldr	r3, [pc, #80]	@ (80011ac <MX_GPIO_Init+0x84>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	607b      	str	r3, [r7, #4]
 800116a:	4b10      	ldr	r3, [pc, #64]	@ (80011ac <MX_GPIO_Init+0x84>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	4a0f      	ldr	r2, [pc, #60]	@ (80011ac <MX_GPIO_Init+0x84>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	6313      	str	r3, [r2, #48]	@ 0x30
 8001176:	4b0d      	ldr	r3, [pc, #52]	@ (80011ac <MX_GPIO_Init+0x84>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	4b09      	ldr	r3, [pc, #36]	@ (80011ac <MX_GPIO_Init+0x84>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a08      	ldr	r2, [pc, #32]	@ (80011ac <MX_GPIO_Init+0x84>)
 800118c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b06      	ldr	r3, [pc, #24]	@ (80011ac <MX_GPIO_Init+0x84>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800119a:	603b      	str	r3, [r7, #0]
 800119c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40023800 	.word	0x40023800

080011b0 <EXTI3_IRQHandler>:

/* USER CODE BEGIN 4 */
void EXTI3_IRQHandler(void)
{
 80011b0:	b5b0      	push	{r4, r5, r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
	EXTI->PR &= ~(0x01<<3); //resets interrupt flag
 80011b6:	4b79      	ldr	r3, [pc, #484]	@ (800139c <EXTI3_IRQHandler+0x1ec>)
 80011b8:	695b      	ldr	r3, [r3, #20]
 80011ba:	4a78      	ldr	r2, [pc, #480]	@ (800139c <EXTI3_IRQHandler+0x1ec>)
 80011bc:	f023 0308 	bic.w	r3, r3, #8
 80011c0:	6153      	str	r3, [r2, #20]
	LED1.port->ODR |= 0x01; //->PJ0/no bit shifting required!
 80011c2:	4b77      	ldr	r3, [pc, #476]	@ (80013a0 <EXTI3_IRQHandler+0x1f0>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	695a      	ldr	r2, [r3, #20]
 80011c8:	4b75      	ldr	r3, [pc, #468]	@ (80013a0 <EXTI3_IRQHandler+0x1f0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f042 0201 	orr.w	r2, r2, #1
 80011d0:	615a      	str	r2, [r3, #20]
	__NVIC_DisableIRQ(EXTI3_IRQn); //disables current interrupt!
 80011d2:	2009      	movs	r0, #9
 80011d4:	f7ff fcf0 	bl	8000bb8 <__NVIC_DisableIRQ>
//make this so that it
	bool RX_result = SX1272_readReceive(&lora, pointerdata, LORA_MSG_LENGTH);
 80011d8:	2220      	movs	r2, #32
 80011da:	4972      	ldr	r1, [pc, #456]	@ (80013a4 <EXTI3_IRQHandler+0x1f4>)
 80011dc:	4872      	ldr	r0, [pc, #456]	@ (80013a8 <EXTI3_IRQHandler+0x1f8>)
 80011de:	f7ff fc0b 	bl	80009f8 <SX1272_readReceive>
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
	uint8_t packet_id = pointerdata[0];
 80011e6:	4b6f      	ldr	r3, [pc, #444]	@ (80013a4 <EXTI3_IRQHandler+0x1f4>)
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	71bb      	strb	r3, [r7, #6]
	uint8_t idx = 1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	717b      	strb	r3, [r7, #5]
	if(RX_result)
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 80bf 	beq.w	8001376 <EXTI3_IRQHandler+0x1c6>
	{
	//have USART comms send packets to PI in each switch case!
		lora_error_state.LoRa_receive_failed = false;
 80011f8:	4b6c      	ldr	r3, [pc, #432]	@ (80013ac <EXTI3_IRQHandler+0x1fc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	705a      	strb	r2, [r3, #1]
		switch(packet_id) //this is packet IDs!
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	3b03      	subs	r3, #3
 8001202:	2b04      	cmp	r3, #4
 8001204:	f200 808a 	bhi.w	800131c <EXTI3_IRQHandler+0x16c>
 8001208:	a201      	add	r2, pc, #4	@ (adr r2, 8001210 <EXTI3_IRQHandler+0x60>)
 800120a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120e:	bf00      	nop
 8001210:	08001225 	.word	0x08001225
 8001214:	08001263 	.word	0x08001263
 8001218:	0800131d 	.word	0x0800131d
 800121c:	080012a1 	.word	0x080012a1
 8001220:	080012df 	.word	0x080012df
		{
			case 3: //NORMAL AV DATA
				memcpy(&LORA_DATA_PACKET_3.data, pointerdata[idx +=LORA_MSG_PAYLOAD_LENGTH], LORA_MSG_PAYLOAD_LENGTH);
 8001224:	797b      	ldrb	r3, [r7, #5]
 8001226:	331f      	adds	r3, #31
 8001228:	717b      	strb	r3, [r7, #5]
 800122a:	797b      	ldrb	r3, [r7, #5]
 800122c:	4a5d      	ldr	r2, [pc, #372]	@ (80013a4 <EXTI3_IRQHandler+0x1f4>)
 800122e:	5cd3      	ldrb	r3, [r2, r3]
 8001230:	461a      	mov	r2, r3
 8001232:	4b5f      	ldr	r3, [pc, #380]	@ (80013b0 <EXTI3_IRQHandler+0x200>)
 8001234:	3301      	adds	r3, #1
 8001236:	6814      	ldr	r4, [r2, #0]
 8001238:	6850      	ldr	r0, [r2, #4]
 800123a:	6891      	ldr	r1, [r2, #8]
 800123c:	68d5      	ldr	r5, [r2, #12]
 800123e:	601c      	str	r4, [r3, #0]
 8001240:	6058      	str	r0, [r3, #4]
 8001242:	6099      	str	r1, [r3, #8]
 8001244:	60dd      	str	r5, [r3, #12]
 8001246:	6914      	ldr	r4, [r2, #16]
 8001248:	6950      	ldr	r0, [r2, #20]
 800124a:	6991      	ldr	r1, [r2, #24]
 800124c:	611c      	str	r4, [r3, #16]
 800124e:	6158      	str	r0, [r3, #20]
 8001250:	6199      	str	r1, [r3, #24]
 8001252:	8b91      	ldrh	r1, [r2, #28]
 8001254:	7f92      	ldrb	r2, [r2, #30]
 8001256:	8399      	strh	r1, [r3, #28]
 8001258:	779a      	strb	r2, [r3, #30]
				lora_error_state.ID_not_valid = false;
 800125a:	4b54      	ldr	r3, [pc, #336]	@ (80013ac <EXTI3_IRQHandler+0x1fc>)
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]

				break;
 8001260:	e08c      	b.n	800137c <EXTI3_IRQHandler+0x1cc>
			case 4: //GPS DATA
				memcpy(&LORA_DATA_PACKET_4.data, pointerdata[idx +=LORA_MSG_PAYLOAD_LENGTH], LORA_MSG_PAYLOAD_LENGTH);
 8001262:	797b      	ldrb	r3, [r7, #5]
 8001264:	331f      	adds	r3, #31
 8001266:	717b      	strb	r3, [r7, #5]
 8001268:	797b      	ldrb	r3, [r7, #5]
 800126a:	4a4e      	ldr	r2, [pc, #312]	@ (80013a4 <EXTI3_IRQHandler+0x1f4>)
 800126c:	5cd3      	ldrb	r3, [r2, r3]
 800126e:	461a      	mov	r2, r3
 8001270:	4b50      	ldr	r3, [pc, #320]	@ (80013b4 <EXTI3_IRQHandler+0x204>)
 8001272:	3301      	adds	r3, #1
 8001274:	6814      	ldr	r4, [r2, #0]
 8001276:	6850      	ldr	r0, [r2, #4]
 8001278:	6891      	ldr	r1, [r2, #8]
 800127a:	68d5      	ldr	r5, [r2, #12]
 800127c:	601c      	str	r4, [r3, #0]
 800127e:	6058      	str	r0, [r3, #4]
 8001280:	6099      	str	r1, [r3, #8]
 8001282:	60dd      	str	r5, [r3, #12]
 8001284:	6914      	ldr	r4, [r2, #16]
 8001286:	6950      	ldr	r0, [r2, #20]
 8001288:	6991      	ldr	r1, [r2, #24]
 800128a:	611c      	str	r4, [r3, #16]
 800128c:	6158      	str	r0, [r3, #20]
 800128e:	6199      	str	r1, [r3, #24]
 8001290:	8b91      	ldrh	r1, [r2, #28]
 8001292:	7f92      	ldrb	r2, [r2, #30]
 8001294:	8399      	strh	r1, [r3, #28]
 8001296:	779a      	strb	r2, [r3, #30]
				lora_error_state.ID_not_valid = false;
 8001298:	4b44      	ldr	r3, [pc, #272]	@ (80013ac <EXTI3_IRQHandler+0x1fc>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]

				break;
 800129e:	e06d      	b.n	800137c <EXTI3_IRQHandler+0x1cc>
			case 6: //GSE DATA 1
				memcpy(&GSE_DATA_PACKET_1.data, pointerdata[idx +=LORA_MSG_PAYLOAD_LENGTH], LORA_MSG_PAYLOAD_LENGTH);
 80012a0:	797b      	ldrb	r3, [r7, #5]
 80012a2:	331f      	adds	r3, #31
 80012a4:	717b      	strb	r3, [r7, #5]
 80012a6:	797b      	ldrb	r3, [r7, #5]
 80012a8:	4a3e      	ldr	r2, [pc, #248]	@ (80013a4 <EXTI3_IRQHandler+0x1f4>)
 80012aa:	5cd3      	ldrb	r3, [r2, r3]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b42      	ldr	r3, [pc, #264]	@ (80013b8 <EXTI3_IRQHandler+0x208>)
 80012b0:	3301      	adds	r3, #1
 80012b2:	6814      	ldr	r4, [r2, #0]
 80012b4:	6850      	ldr	r0, [r2, #4]
 80012b6:	6891      	ldr	r1, [r2, #8]
 80012b8:	68d5      	ldr	r5, [r2, #12]
 80012ba:	601c      	str	r4, [r3, #0]
 80012bc:	6058      	str	r0, [r3, #4]
 80012be:	6099      	str	r1, [r3, #8]
 80012c0:	60dd      	str	r5, [r3, #12]
 80012c2:	6914      	ldr	r4, [r2, #16]
 80012c4:	6950      	ldr	r0, [r2, #20]
 80012c6:	6991      	ldr	r1, [r2, #24]
 80012c8:	611c      	str	r4, [r3, #16]
 80012ca:	6158      	str	r0, [r3, #20]
 80012cc:	6199      	str	r1, [r3, #24]
 80012ce:	8b91      	ldrh	r1, [r2, #28]
 80012d0:	7f92      	ldrb	r2, [r2, #30]
 80012d2:	8399      	strh	r1, [r3, #28]
 80012d4:	779a      	strb	r2, [r3, #30]
				lora_error_state.ID_not_valid = false;
 80012d6:	4b35      	ldr	r3, [pc, #212]	@ (80013ac <EXTI3_IRQHandler+0x1fc>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]

				break;
 80012dc:	e04e      	b.n	800137c <EXTI3_IRQHandler+0x1cc>
			case 7: //GSE DATA 2
				memcpy(&GSE_DATA_PACKET_2.data, pointerdata[idx +=LORA_MSG_PAYLOAD_LENGTH], LORA_MSG_PAYLOAD_LENGTH);
 80012de:	797b      	ldrb	r3, [r7, #5]
 80012e0:	331f      	adds	r3, #31
 80012e2:	717b      	strb	r3, [r7, #5]
 80012e4:	797b      	ldrb	r3, [r7, #5]
 80012e6:	4a2f      	ldr	r2, [pc, #188]	@ (80013a4 <EXTI3_IRQHandler+0x1f4>)
 80012e8:	5cd3      	ldrb	r3, [r2, r3]
 80012ea:	461a      	mov	r2, r3
 80012ec:	4b33      	ldr	r3, [pc, #204]	@ (80013bc <EXTI3_IRQHandler+0x20c>)
 80012ee:	3301      	adds	r3, #1
 80012f0:	6814      	ldr	r4, [r2, #0]
 80012f2:	6850      	ldr	r0, [r2, #4]
 80012f4:	6891      	ldr	r1, [r2, #8]
 80012f6:	68d5      	ldr	r5, [r2, #12]
 80012f8:	601c      	str	r4, [r3, #0]
 80012fa:	6058      	str	r0, [r3, #4]
 80012fc:	6099      	str	r1, [r3, #8]
 80012fe:	60dd      	str	r5, [r3, #12]
 8001300:	6914      	ldr	r4, [r2, #16]
 8001302:	6950      	ldr	r0, [r2, #20]
 8001304:	6991      	ldr	r1, [r2, #24]
 8001306:	611c      	str	r4, [r3, #16]
 8001308:	6158      	str	r0, [r3, #20]
 800130a:	6199      	str	r1, [r3, #24]
 800130c:	8b91      	ldrh	r1, [r2, #28]
 800130e:	7f92      	ldrb	r2, [r2, #30]
 8001310:	8399      	strh	r1, [r3, #28]
 8001312:	779a      	strb	r2, [r3, #30]
				lora_error_state.ID_not_valid = false;
 8001314:	4b25      	ldr	r3, [pc, #148]	@ (80013ac <EXTI3_IRQHandler+0x1fc>)
 8001316:	2200      	movs	r2, #0
 8001318:	701a      	strb	r2, [r3, #0]

				break;
 800131a:	e02f      	b.n	800137c <EXTI3_IRQHandler+0x1cc>

			default:
				LED1.port->ODR &= ~0x01; //->PJ0/no bit shifting required!
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <EXTI3_IRQHandler+0x1f0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	695a      	ldr	r2, [r3, #20]
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <EXTI3_IRQHandler+0x1f0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	615a      	str	r2, [r3, #20]
				Delay_ms(20);
 800132c:	2014      	movs	r0, #20
 800132e:	f7ff f8dc 	bl	80004ea <Delay_ms>
				LED1.port->ODR |= 0x01; //->PJ0/no bit shifting required!
 8001332:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <EXTI3_IRQHandler+0x1f0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <EXTI3_IRQHandler+0x1f0>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0201 	orr.w	r2, r2, #1
 8001340:	615a      	str	r2, [r3, #20]
				Delay_ms(15);
 8001342:	200f      	movs	r0, #15
 8001344:	f7ff f8d1 	bl	80004ea <Delay_ms>
				LED1.port->ODR &= ~0x01; //->PJ0/no bit shifting required!
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <EXTI3_IRQHandler+0x1f0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	695a      	ldr	r2, [r3, #20]
 800134e:	4b14      	ldr	r3, [pc, #80]	@ (80013a0 <EXTI3_IRQHandler+0x1f0>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	615a      	str	r2, [r3, #20]
				Delay_ms(20);
 8001358:	2014      	movs	r0, #20
 800135a:	f7ff f8c6 	bl	80004ea <Delay_ms>
				LED1.port->ODR |= 0x01; //->PJ0/no bit shifting required!
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <EXTI3_IRQHandler+0x1f0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	695a      	ldr	r2, [r3, #20]
 8001364:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <EXTI3_IRQHandler+0x1f0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f042 0201 	orr.w	r2, r2, #1
 800136c:	615a      	str	r2, [r3, #20]

			lora_error_state.ID_not_valid = true;
 800136e:	4b0f      	ldr	r3, [pc, #60]	@ (80013ac <EXTI3_IRQHandler+0x1fc>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
			break;
 8001374:	e002      	b.n	800137c <EXTI3_IRQHandler+0x1cc>
		}
	}
	else
	{
		lora_error_state.LoRa_receive_failed = true;
 8001376:	4b0d      	ldr	r3, [pc, #52]	@ (80013ac <EXTI3_IRQHandler+0x1fc>)
 8001378:	2201      	movs	r2, #1
 800137a:	705a      	strb	r2, [r3, #1]
	}
	LED1.port->ODR &= ~0x01; //->PJ0/no bit shifting required!
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <EXTI3_IRQHandler+0x1f0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695a      	ldr	r2, [r3, #20]
 8001382:	4b07      	ldr	r3, [pc, #28]	@ (80013a0 <EXTI3_IRQHandler+0x1f0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	615a      	str	r2, [r3, #20]
	__NVIC_EnableIRQ(EXTI3_IRQn); //disables current interrupt!
 800138c:	2009      	movs	r0, #9
 800138e:	f7ff fbf5 	bl	8000b7c <__NVIC_EnableIRQ>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bdb0      	pop	{r4, r5, r7, pc}
 800139a:	bf00      	nop
 800139c:	40013c00 	.word	0x40013c00
 80013a0:	20000174 	.word	0x20000174
 80013a4:	20000044 	.word	0x20000044
 80013a8:	20000064 	.word	0x20000064
 80013ac:	20000170 	.word	0x20000170
 80013b0:	200000f0 	.word	0x200000f0
 80013b4:	20000110 	.word	0x20000110
 80013b8:	20000130 	.word	0x20000130
 80013bc:	20000150 	.word	0x20000150

080013c0 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
	//this interrupt handler is designed for the PC11 when RXNE is set!

}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d2:	b672      	cpsid	i
}
 80013d4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d6:	bf00      	nop
 80013d8:	e7fd      	b.n	80013d6 <Error_Handler+0x8>
	...

080013dc <SPI_init>:
 *                   configuration.
 *
 * @return spi       Initialised SPI_t struct.
 **
 * =============================================================================== */
SPI_t SPI_init(SPI_TypeDef *interface, SPI_Config *config) {
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b090      	sub	sp, #64	@ 0x40
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	60f8      	str	r0, [r7, #12]
 80013e4:	60b9      	str	r1, [r7, #8]
 80013e6:	607a      	str	r2, [r7, #4]
  // Early return error struct if peripheral is NULL
  if (interface == NULL)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d109      	bne.n	8001402 <SPI_init+0x26>
    return (SPI_t){.interface = NULL};
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	461a      	mov	r2, r3
 80013f2:	2300      	movs	r3, #0
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	6053      	str	r3, [r2, #4]
 80013f8:	6093      	str	r3, [r2, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
 80013fc:	6113      	str	r3, [r2, #16]
 80013fe:	6153      	str	r3, [r2, #20]
  spi.receive      = (spi.config.DFF == SPI_DFF8) ? SPI_receive8 : SPI_receive16;
  spi.transmit     = SPI_transmit;
  spi.updateConfig = SPI_updateConfig;

  return spi;
}
 8001400:	e034      	b.n	800146c <SPI_init+0x90>
  SPI_t spi = {.interface = interface};
 8001402:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]
 800140c:	609a      	str	r2, [r3, #8]
 800140e:	60da      	str	r2, [r3, #12]
 8001410:	611a      	str	r2, [r3, #16]
 8001412:	615a      	str	r2, [r3, #20]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
  SPI_updateConfig(&spi, config);
 8001418:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800141c:	6879      	ldr	r1, [r7, #4]
 800141e:	4618      	mov	r0, r3
 8001420:	f000 f8df 	bl	80015e2 <SPI_updateConfig>
  spi.send         = (spi.config.DFF == SPI_DFF8) ? SPI_send8 : SPI_send16;
 8001424:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <SPI_init+0x5a>
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <SPI_init+0x98>)
 8001434:	e000      	b.n	8001438 <SPI_init+0x5c>
 8001436:	4b10      	ldr	r3, [pc, #64]	@ (8001478 <SPI_init+0x9c>)
 8001438:	633b      	str	r3, [r7, #48]	@ 0x30
  spi.receive      = (spi.config.DFF == SPI_DFF8) ? SPI_receive8 : SPI_receive16;
 800143a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <SPI_init+0x70>
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <SPI_init+0xa0>)
 800144a:	e000      	b.n	800144e <SPI_init+0x72>
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <SPI_init+0xa4>)
 800144e:	637b      	str	r3, [r7, #52]	@ 0x34
  spi.transmit     = SPI_transmit;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <SPI_init+0xa8>)
 8001452:	63bb      	str	r3, [r7, #56]	@ 0x38
  spi.updateConfig = SPI_updateConfig;
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <SPI_init+0xac>)
 8001456:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return spi;
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	461d      	mov	r5, r3
 800145c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8001460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001464:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001468:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	3740      	adds	r7, #64	@ 0x40
 8001470:	46bd      	mov	sp, r7
 8001472:	bdb0      	pop	{r4, r5, r7, pc}
 8001474:	0800151b 	.word	0x0800151b
 8001478:	0800154d 	.word	0x0800154d
 800147c:	0800157d 	.word	0x0800157d
 8001480:	080015b1 	.word	0x080015b1
 8001484:	080014d9 	.word	0x080014d9
 8001488:	080015e3 	.word	0x080015e3

0800148c <_SPI_init>:
 *                    configuration. @see SPI_Config
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
static void _SPI_init(SPI_TypeDef *interface, SPI_Config *config) {
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  // Wait for any ongoing transactions to finish
  while (interface->SR & SPI_SR_BSY);
 8001496:	bf00      	nop
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f9      	bne.n	8001498 <_SPI_init+0xc>

  // Disable peripheral and update config
  config->SPE    = false;               // Make sure SPE is disabled in config
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	7813      	ldrb	r3, [r2, #0]
 80014a8:	f36f 1386 	bfc	r3, #6, #1
 80014ac:	7013      	strb	r3, [r2, #0]
  interface->CR1 = *(uint16_t *)config; // Update CR1 with configured values
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	881b      	ldrh	r3, [r3, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	601a      	str	r2, [r3, #0]

  // Re-enable peripheral
  config->SPE    = true;                // Set SPE back to true
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	7813      	ldrb	r3, [r2, #0]
 80014bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014c0:	7013      	strb	r3, [r2, #0]
  interface->CR1 = *(uint16_t *)config; // Update CR1 with SPE enabled
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	601a      	str	r2, [r3, #0]
}
 80014cc:	bf00      	nop
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <SPI_transmit>:
 * @param  data 		Data payload to be sent to slave device.
 *
 * @retval response Returns the slave device response from the transaction.
 **
 * =============================================================================== */
uint16_t SPI_transmit(SPI_t *spi, uint16_t data) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	807b      	strh	r3, [r7, #2]
  volatile uint16_t response;
  spi->send(spi, data);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	887a      	ldrh	r2, [r7, #2]
 80014ea:	4611      	mov	r1, r2
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	4798      	blx	r3
  spi->receive(spi, &response);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	f107 020e 	add.w	r2, r7, #14
 80014f8:	4611      	mov	r1, r2
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	4798      	blx	r3
  while (spi->interface->SR & SPI_SR_BSY);
 80014fe:	bf00      	nop
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800150a:	2b00      	cmp	r3, #0
 800150c:	d1f8      	bne.n	8001500 <SPI_transmit+0x28>
  return response;
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	b29b      	uxth	r3, r3
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <SPI_send8>:
 * @param  data The data to send.
 *
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_send8(SPI_t *spi, uint16_t data) {
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8001526:	bf00      	nop
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f8      	beq.n	8001528 <SPI_send8+0xe>
  spi->interface->DR = (uint8_t)data;
 8001536:	887b      	ldrh	r3, [r7, #2]
 8001538:	b2da      	uxtb	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	60da      	str	r2, [r3, #12]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <SPI_send16>:

static void SPI_send16(SPI_t *spi, uint16_t data) {
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
  while (!(spi->interface->SR & SPI_SR_TXE));
 8001558:	bf00      	nop
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f8      	beq.n	800155a <SPI_send16+0xe>
  spi->interface->DR = data;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	887a      	ldrh	r2, [r7, #2]
 800156e:	60da      	str	r2, [r3, #12]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <SPI_receive8>:
 * @param  data Pointer to variable to receive data into.
 *
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_receive8(SPI_t *spi, volatile uint16_t *data) {
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 8001586:	bf00      	nop
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f8      	beq.n	8001588 <SPI_receive8+0xc>
  *data = (uint8_t)spi->interface->DR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	801a      	strh	r2, [r3, #0]
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <SPI_receive16>:
 * @param  data Pointer to variable to receive data into.
 *
 * @return @c NULL.
 **
 * =============================================================================== */
static void SPI_receive16(SPI_t *spi, volatile uint16_t *data) {
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  while (!(spi->interface->SR & SPI_SR_RXNE));
 80015ba:	bf00      	nop
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f8      	beq.n	80015bc <SPI_receive16+0xc>
  *data = spi->interface->DR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	801a      	strh	r2, [r3, #0]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <SPI_updateConfig>:
 * @param   spi Pointer to SPI_t struct.
 *
 * @return  @c NULL.
 **
 * =============================================================================== */
void SPI_updateConfig(SPI_t *spi, SPI_Config *config) {
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b084      	sub	sp, #16
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
  // Initialise config with default values if passed NULL.
  if (config == NULL) {
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d11d      	bne.n	800162e <SPI_updateConfig+0x4c>
    config = &SPI_CONFIG_DEFAULT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	81bb      	strh	r3, [r7, #12]
 80015f6:	7b3b      	ldrb	r3, [r7, #12]
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	733b      	strb	r3, [r7, #12]
 80015fe:	7b3b      	ldrb	r3, [r7, #12]
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	733b      	strb	r3, [r7, #12]
 8001606:	7b3b      	ldrb	r3, [r7, #12]
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	733b      	strb	r3, [r7, #12]
 800160e:	7b3b      	ldrb	r3, [r7, #12]
 8001610:	2202      	movs	r2, #2
 8001612:	f362 03c5 	bfi	r3, r2, #3, #3
 8001616:	733b      	strb	r3, [r7, #12]
 8001618:	7b7b      	ldrb	r3, [r7, #13]
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	737b      	strb	r3, [r7, #13]
 8001620:	7b7b      	ldrb	r3, [r7, #13]
 8001622:	f043 0302 	orr.w	r3, r3, #2
 8001626:	737b      	strb	r3, [r7, #13]
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	603b      	str	r3, [r7, #0]
  }

  // Update peripheral with new config
  spi->config = *config;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	3304      	adds	r3, #4
 8001634:	8812      	ldrh	r2, [r2, #0]
 8001636:	801a      	strh	r2, [r3, #0]

  // Initialise SPI registers and enable peripheral
  _SPI_init(spi->interface, config);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6839      	ldr	r1, [r7, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff24 	bl	800148c <_SPI_init>
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <HAL_MspInit+0x4c>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	4a0f      	ldr	r2, [pc, #60]	@ (8001698 <HAL_MspInit+0x4c>)
 800165c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001660:	6453      	str	r3, [r2, #68]	@ 0x44
 8001662:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <HAL_MspInit+0x4c>)
 8001664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	603b      	str	r3, [r7, #0]
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <HAL_MspInit+0x4c>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a08      	ldr	r2, [pc, #32]	@ (8001698 <HAL_MspInit+0x4c>)
 8001678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <HAL_MspInit+0x4c>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800

0800169c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016a0:	bf00      	nop
 80016a2:	e7fd      	b.n	80016a0 <NMI_Handler+0x4>

080016a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016a8:	bf00      	nop
 80016aa:	e7fd      	b.n	80016a8 <HardFault_Handler+0x4>

080016ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <MemManage_Handler+0x4>

080016b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016b8:	bf00      	nop
 80016ba:	e7fd      	b.n	80016b8 <BusFault_Handler+0x4>

080016bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <UsageFault_Handler+0x4>

080016c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f2:	f000 f891 	bl	8001818 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
	...

080016fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001700:	4b06      	ldr	r3, [pc, #24]	@ (800171c <SystemInit+0x20>)
 8001702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <SystemInit+0x20>)
 8001708:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800170c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001720:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001758 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001724:	f7ff ffea 	bl	80016fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001728:	480c      	ldr	r0, [pc, #48]	@ (800175c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800172a:	490d      	ldr	r1, [pc, #52]	@ (8001760 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001730:	e002      	b.n	8001738 <LoopCopyDataInit>

08001732 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001732:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001734:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001736:	3304      	adds	r3, #4

08001738 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001738:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800173c:	d3f9      	bcc.n	8001732 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001740:	4c0a      	ldr	r4, [pc, #40]	@ (800176c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001744:	e001      	b.n	800174a <LoopFillZerobss>

08001746 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001746:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001748:	3204      	adds	r2, #4

0800174a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800174c:	d3fb      	bcc.n	8001746 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800174e:	f000 fde5 	bl	800231c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001752:	f7ff fa55 	bl	8000c00 <main>
  bx  lr    
 8001756:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001758:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800175c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001760:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001764:	080023a4 	.word	0x080023a4
  ldr r2, =_sbss
 8001768:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 800176c:	20000194 	.word	0x20000194

08001770 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001770:	e7fe      	b.n	8001770 <ADC_IRQHandler>
	...

08001774 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001778:	4b0e      	ldr	r3, [pc, #56]	@ (80017b4 <HAL_Init+0x40>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a0d      	ldr	r2, [pc, #52]	@ (80017b4 <HAL_Init+0x40>)
 800177e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001782:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001784:	4b0b      	ldr	r3, [pc, #44]	@ (80017b4 <HAL_Init+0x40>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <HAL_Init+0x40>)
 800178a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800178e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001790:	4b08      	ldr	r3, [pc, #32]	@ (80017b4 <HAL_Init+0x40>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <HAL_Init+0x40>)
 8001796:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800179a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179c:	2003      	movs	r0, #3
 800179e:	f000 f90d 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a2:	200f      	movs	r0, #15
 80017a4:	f000 f808 	bl	80017b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a8:	f7ff ff50 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023c00 	.word	0x40023c00

080017b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <HAL_InitTick+0x54>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <HAL_InitTick+0x58>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80017d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 f917 	bl	8001a0a <HAL_SYSTICK_Config>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e00e      	b.n	8001804 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b0f      	cmp	r3, #15
 80017ea:	d80a      	bhi.n	8001802 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ec:	2200      	movs	r2, #0
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	f04f 30ff 	mov.w	r0, #4294967295
 80017f4:	f000 f8ed 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f8:	4a06      	ldr	r2, [pc, #24]	@ (8001814 <HAL_InitTick+0x5c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	e000      	b.n	8001804 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	2000001c 	.word	0x2000001c
 8001810:	20000024 	.word	0x20000024
 8001814:	20000020 	.word	0x20000020

08001818 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800181c:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <HAL_IncTick+0x20>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	461a      	mov	r2, r3
 8001822:	4b06      	ldr	r3, [pc, #24]	@ (800183c <HAL_IncTick+0x24>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4413      	add	r3, r2
 8001828:	4a04      	ldr	r2, [pc, #16]	@ (800183c <HAL_IncTick+0x24>)
 800182a:	6013      	str	r3, [r2, #0]
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	20000024 	.word	0x20000024
 800183c:	20000190 	.word	0x20000190

08001840 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  return uwTick;
 8001844:	4b03      	ldr	r3, [pc, #12]	@ (8001854 <HAL_GetTick+0x14>)
 8001846:	681b      	ldr	r3, [r3, #0]
}
 8001848:	4618      	mov	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	20000190 	.word	0x20000190

08001858 <__NVIC_SetPriorityGrouping>:
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	@ (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	@ (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	6039      	str	r1, [r7, #0]
 80018c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	db0a      	blt.n	80018e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	490c      	ldr	r1, [pc, #48]	@ (8001908 <__NVIC_SetPriority+0x4c>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	0112      	lsls	r2, r2, #4
 80018dc:	b2d2      	uxtb	r2, r2
 80018de:	440b      	add	r3, r1
 80018e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e4:	e00a      	b.n	80018fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4908      	ldr	r1, [pc, #32]	@ (800190c <__NVIC_SetPriority+0x50>)
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	3b04      	subs	r3, #4
 80018f4:	0112      	lsls	r2, r2, #4
 80018f6:	b2d2      	uxtb	r2, r2
 80018f8:	440b      	add	r3, r1
 80018fa:	761a      	strb	r2, [r3, #24]
}
 80018fc:	bf00      	nop
 80018fe:	370c      	adds	r7, #12
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000e100 	.word	0xe000e100
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	@ 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f1c3 0307 	rsb	r3, r3, #7
 800192a:	2b04      	cmp	r3, #4
 800192c:	bf28      	it	cs
 800192e:	2304      	movcs	r3, #4
 8001930:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3304      	adds	r3, #4
 8001936:	2b06      	cmp	r3, #6
 8001938:	d902      	bls.n	8001940 <NVIC_EncodePriority+0x30>
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	3b03      	subs	r3, #3
 800193e:	e000      	b.n	8001942 <NVIC_EncodePriority+0x32>
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001944:	f04f 32ff 	mov.w	r2, #4294967295
 8001948:	69bb      	ldr	r3, [r7, #24]
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	401a      	ands	r2, r3
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001958:	f04f 31ff 	mov.w	r1, #4294967295
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	fa01 f303 	lsl.w	r3, r1, r3
 8001962:	43d9      	mvns	r1, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	4313      	orrs	r3, r2
         );
}
 800196a:	4618      	mov	r0, r3
 800196c:	3724      	adds	r7, #36	@ 0x24
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	@ (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff8e 	bl	80018bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	@ (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff47 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff5c 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff8e 	bl	8001910 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5d 	bl	80018bc <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffb0 	bl	8001978 <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	603b      	str	r3, [r7, #0]
 8001a32:	4b20      	ldr	r3, [pc, #128]	@ (8001ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <HAL_PWREx_EnableOverDrive+0x90>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a46:	603b      	str	r3, [r7, #0]
 8001a48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <HAL_PWREx_EnableOverDrive+0x94>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a50:	f7ff fef6 	bl	8001840 <HAL_GetTick>
 8001a54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a56:	e009      	b.n	8001a6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a58:	f7ff fef2 	bl	8001840 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a66:	d901      	bls.n	8001a6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e01f      	b.n	8001aac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a6c:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <HAL_PWREx_EnableOverDrive+0x98>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a78:	d1ee      	bne.n	8001a58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a80:	f7ff fede 	bl	8001840 <HAL_GetTick>
 8001a84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a86:	e009      	b.n	8001a9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a88:	f7ff feda 	bl	8001840 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a96:	d901      	bls.n	8001a9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e007      	b.n	8001aac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a9c:	4b07      	ldr	r3, [pc, #28]	@ (8001abc <HAL_PWREx_EnableOverDrive+0x98>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001aa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001aa8:	d1ee      	bne.n	8001a88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	420e0040 	.word	0x420e0040
 8001abc:	40007000 	.word	0x40007000
 8001ac0:	420e0044 	.word	0x420e0044

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e267      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d075      	beq.n	8001bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001ae2:	4b88      	ldr	r3, [pc, #544]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f003 030c 	and.w	r3, r3, #12
 8001aea:	2b04      	cmp	r3, #4
 8001aec:	d00c      	beq.n	8001b08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aee:	4b85      	ldr	r3, [pc, #532]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d112      	bne.n	8001b20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001afa:	4b82      	ldr	r3, [pc, #520]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b06:	d10b      	bne.n	8001b20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b08:	4b7e      	ldr	r3, [pc, #504]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d05b      	beq.n	8001bcc <HAL_RCC_OscConfig+0x108>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d157      	bne.n	8001bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e242      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b28:	d106      	bne.n	8001b38 <HAL_RCC_OscConfig+0x74>
 8001b2a:	4b76      	ldr	r3, [pc, #472]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a75      	ldr	r2, [pc, #468]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	e01d      	b.n	8001b74 <HAL_RCC_OscConfig+0xb0>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b40:	d10c      	bne.n	8001b5c <HAL_RCC_OscConfig+0x98>
 8001b42:	4b70      	ldr	r3, [pc, #448]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a6f      	ldr	r2, [pc, #444]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b4c:	6013      	str	r3, [r2, #0]
 8001b4e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a6c      	ldr	r2, [pc, #432]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e00b      	b.n	8001b74 <HAL_RCC_OscConfig+0xb0>
 8001b5c:	4b69      	ldr	r3, [pc, #420]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a68      	ldr	r2, [pc, #416]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	4b66      	ldr	r3, [pc, #408]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a65      	ldr	r2, [pc, #404]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fe60 	bl	8001840 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff fe5c 	bl	8001840 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	@ 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e207      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b96:	4b5b      	ldr	r3, [pc, #364]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0f0      	beq.n	8001b84 <HAL_RCC_OscConfig+0xc0>
 8001ba2:	e014      	b.n	8001bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba4:	f7ff fe4c 	bl	8001840 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bac:	f7ff fe48 	bl	8001840 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b64      	cmp	r3, #100	@ 0x64
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e1f3      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bbe:	4b51      	ldr	r3, [pc, #324]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0xe8>
 8001bca:	e000      	b.n	8001bce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d063      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bda:	4b4a      	ldr	r3, [pc, #296]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	f003 030c 	and.w	r3, r3, #12
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00b      	beq.n	8001bfe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001be6:	4b47      	ldr	r3, [pc, #284]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d11c      	bne.n	8001c2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf2:	4b44      	ldr	r3, [pc, #272]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d116      	bne.n	8001c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bfe:	4b41      	ldr	r3, [pc, #260]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0302 	and.w	r3, r3, #2
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_RCC_OscConfig+0x152>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d001      	beq.n	8001c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e1c7      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c16:	4b3b      	ldr	r3, [pc, #236]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4937      	ldr	r1, [pc, #220]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	e03a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d020      	beq.n	8001c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c34:	4b34      	ldr	r3, [pc, #208]	@ (8001d08 <HAL_RCC_OscConfig+0x244>)
 8001c36:	2201      	movs	r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7ff fe01 	bl	8001840 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c42:	f7ff fdfd 	bl	8001840 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e1a8      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c54:	4b2b      	ldr	r3, [pc, #172]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f0      	beq.n	8001c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c60:	4b28      	ldr	r3, [pc, #160]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4925      	ldr	r1, [pc, #148]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
 8001c74:	e015      	b.n	8001ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c76:	4b24      	ldr	r3, [pc, #144]	@ (8001d08 <HAL_RCC_OscConfig+0x244>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7c:	f7ff fde0 	bl	8001840 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c84:	f7ff fddc 	bl	8001840 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e187      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c96:	4b1b      	ldr	r3, [pc, #108]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d036      	beq.n	8001d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d016      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cb6:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <HAL_RCC_OscConfig+0x248>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbc:	f7ff fdc0 	bl	8001840 <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff fdbc 	bl	8001840 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e167      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <HAL_RCC_OscConfig+0x240>)
 8001cd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x200>
 8001ce2:	e01b      	b.n	8001d1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce4:	4b09      	ldr	r3, [pc, #36]	@ (8001d0c <HAL_RCC_OscConfig+0x248>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cea:	f7ff fda9 	bl	8001840 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	e00e      	b.n	8001d10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf2:	f7ff fda5 	bl	8001840 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d907      	bls.n	8001d10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e150      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
 8001d04:	40023800 	.word	0x40023800
 8001d08:	42470000 	.word	0x42470000
 8001d0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d10:	4b88      	ldr	r3, [pc, #544]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ea      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 8097 	beq.w	8001e58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d2e:	4b81      	ldr	r3, [pc, #516]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d10f      	bne.n	8001d5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	4b7d      	ldr	r3, [pc, #500]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	4a7c      	ldr	r2, [pc, #496]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4a:	4b7a      	ldr	r3, [pc, #488]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	60bb      	str	r3, [r7, #8]
 8001d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d56:	2301      	movs	r3, #1
 8001d58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5a:	4b77      	ldr	r3, [pc, #476]	@ (8001f38 <HAL_RCC_OscConfig+0x474>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d118      	bne.n	8001d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d66:	4b74      	ldr	r3, [pc, #464]	@ (8001f38 <HAL_RCC_OscConfig+0x474>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a73      	ldr	r2, [pc, #460]	@ (8001f38 <HAL_RCC_OscConfig+0x474>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d72:	f7ff fd65 	bl	8001840 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7a:	f7ff fd61 	bl	8001840 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e10c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001f38 <HAL_RCC_OscConfig+0x474>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x2ea>
 8001da0:	4b64      	ldr	r3, [pc, #400]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da4:	4a63      	ldr	r2, [pc, #396]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dac:	e01c      	b.n	8001de8 <HAL_RCC_OscConfig+0x324>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b05      	cmp	r3, #5
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x30c>
 8001db6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dba:	4a5e      	ldr	r2, [pc, #376]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001dbc:	f043 0304 	orr.w	r3, r3, #4
 8001dc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc2:	4b5c      	ldr	r3, [pc, #368]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dce:	e00b      	b.n	8001de8 <HAL_RCC_OscConfig+0x324>
 8001dd0:	4b58      	ldr	r3, [pc, #352]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd4:	4a57      	ldr	r2, [pc, #348]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001dd6:	f023 0301 	bic.w	r3, r3, #1
 8001dda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ddc:	4b55      	ldr	r3, [pc, #340]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de0:	4a54      	ldr	r2, [pc, #336]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001de2:	f023 0304 	bic.w	r3, r3, #4
 8001de6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d015      	beq.n	8001e1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df0:	f7ff fd26 	bl	8001840 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df8:	f7ff fd22 	bl	8001840 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e0cb      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0e:	4b49      	ldr	r3, [pc, #292]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0ee      	beq.n	8001df8 <HAL_RCC_OscConfig+0x334>
 8001e1a:	e014      	b.n	8001e46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1c:	f7ff fd10 	bl	8001840 <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e22:	e00a      	b.n	8001e3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e24:	f7ff fd0c 	bl	8001840 <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e0b5      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001e3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ee      	bne.n	8001e24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d105      	bne.n	8001e58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4c:	4b39      	ldr	r3, [pc, #228]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	4a38      	ldr	r2, [pc, #224]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80a1 	beq.w	8001fa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e62:	4b34      	ldr	r3, [pc, #208]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 030c 	and.w	r3, r3, #12
 8001e6a:	2b08      	cmp	r3, #8
 8001e6c:	d05c      	beq.n	8001f28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	699b      	ldr	r3, [r3, #24]
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d141      	bne.n	8001efa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e76:	4b31      	ldr	r3, [pc, #196]	@ (8001f3c <HAL_RCC_OscConfig+0x478>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7c:	f7ff fce0 	bl	8001840 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e84:	f7ff fcdc 	bl	8001840 <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e087      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e96:	4b27      	ldr	r3, [pc, #156]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	019b      	lsls	r3, r3, #6
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb8:	085b      	lsrs	r3, r3, #1
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	041b      	lsls	r3, r3, #16
 8001ebe:	431a      	orrs	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	061b      	lsls	r3, r3, #24
 8001ec6:	491b      	ldr	r1, [pc, #108]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ecc:	4b1b      	ldr	r3, [pc, #108]	@ (8001f3c <HAL_RCC_OscConfig+0x478>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7ff fcb5 	bl	8001840 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eda:	f7ff fcb1 	bl	8001840 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e05c      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eec:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x416>
 8001ef8:	e054      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efa:	4b10      	ldr	r3, [pc, #64]	@ (8001f3c <HAL_RCC_OscConfig+0x478>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fc9e 	bl	8001840 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff fc9a 	bl	8001840 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e045      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	4b06      	ldr	r3, [pc, #24]	@ (8001f34 <HAL_RCC_OscConfig+0x470>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x444>
 8001f26:	e03d      	b.n	8001fa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e038      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40007000 	.word	0x40007000
 8001f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f40:	4b1b      	ldr	r3, [pc, #108]	@ (8001fb0 <HAL_RCC_OscConfig+0x4ec>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d028      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d121      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d11a      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f70:	4013      	ands	r3, r2
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d111      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f86:	085b      	lsrs	r3, r3, #1
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d107      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800

08001fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e0cc      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fc8:	4b68      	ldr	r3, [pc, #416]	@ (800216c <HAL_RCC_ClockConfig+0x1b8>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 030f 	and.w	r3, r3, #15
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d90c      	bls.n	8001ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd6:	4b65      	ldr	r3, [pc, #404]	@ (800216c <HAL_RCC_ClockConfig+0x1b8>)
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	b2d2      	uxtb	r2, r2
 8001fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fde:	4b63      	ldr	r3, [pc, #396]	@ (800216c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	683a      	ldr	r2, [r7, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d001      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	e0b8      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d020      	beq.n	800203e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002008:	4b59      	ldr	r3, [pc, #356]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	4a58      	ldr	r2, [pc, #352]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002012:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0308 	and.w	r3, r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002020:	4b53      	ldr	r3, [pc, #332]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	4a52      	ldr	r2, [pc, #328]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800202a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800202c:	4b50      	ldr	r3, [pc, #320]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	494d      	ldr	r1, [pc, #308]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800203a:	4313      	orrs	r3, r2
 800203c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d044      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d107      	bne.n	8002062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002052:	4b47      	ldr	r3, [pc, #284]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d119      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e07f      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d003      	beq.n	8002072 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800206e:	2b03      	cmp	r3, #3
 8002070:	d107      	bne.n	8002082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002072:	4b3f      	ldr	r3, [pc, #252]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d109      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e06f      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002082:	4b3b      	ldr	r3, [pc, #236]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e067      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002092:	4b37      	ldr	r3, [pc, #220]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f023 0203 	bic.w	r2, r3, #3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	4934      	ldr	r1, [pc, #208]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020a4:	f7ff fbcc 	bl	8001840 <HAL_GetTick>
 80020a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020aa:	e00a      	b.n	80020c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020ac:	f7ff fbc8 	bl	8001840 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e04f      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f003 020c 	and.w	r2, r3, #12
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d1eb      	bne.n	80020ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d4:	4b25      	ldr	r3, [pc, #148]	@ (800216c <HAL_RCC_ClockConfig+0x1b8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 030f 	and.w	r3, r3, #15
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d20c      	bcs.n	80020fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020e2:	4b22      	ldr	r3, [pc, #136]	@ (800216c <HAL_RCC_ClockConfig+0x1b8>)
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	b2d2      	uxtb	r2, r2
 80020e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b20      	ldr	r3, [pc, #128]	@ (800216c <HAL_RCC_ClockConfig+0x1b8>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e032      	b.n	8002162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002108:	4b19      	ldr	r3, [pc, #100]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4916      	ldr	r1, [pc, #88]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	4313      	orrs	r3, r2
 8002118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002126:	4b12      	ldr	r3, [pc, #72]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	490e      	ldr	r1, [pc, #56]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	4313      	orrs	r3, r2
 8002138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800213a:	f000 f821 	bl	8002180 <HAL_RCC_GetSysClockFreq>
 800213e:	4602      	mov	r2, r0
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	091b      	lsrs	r3, r3, #4
 8002146:	f003 030f 	and.w	r3, r3, #15
 800214a:	490a      	ldr	r1, [pc, #40]	@ (8002174 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	5ccb      	ldrb	r3, [r1, r3]
 800214e:	fa22 f303 	lsr.w	r3, r2, r3
 8002152:	4a09      	ldr	r2, [pc, #36]	@ (8002178 <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002156:	4b09      	ldr	r3, [pc, #36]	@ (800217c <HAL_RCC_ClockConfig+0x1c8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fb2c 	bl	80017b8 <HAL_InitTick>

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40023c00 	.word	0x40023c00
 8002170:	40023800 	.word	0x40023800
 8002174:	08002384 	.word	0x08002384
 8002178:	2000001c 	.word	0x2000001c
 800217c:	20000020 	.word	0x20000020

08002180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002184:	b090      	sub	sp, #64	@ 0x40
 8002186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002198:	4b59      	ldr	r3, [pc, #356]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x180>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 030c 	and.w	r3, r3, #12
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d00d      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x40>
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	f200 80a1 	bhi.w	80022ec <HAL_RCC_GetSysClockFreq+0x16c>
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d002      	beq.n	80021b4 <HAL_RCC_GetSysClockFreq+0x34>
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d003      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0x3a>
 80021b2:	e09b      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021b4:	4b53      	ldr	r3, [pc, #332]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x184>)
 80021b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021b8:	e09b      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ba:	4b53      	ldr	r3, [pc, #332]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x188>)
 80021bc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80021be:	e098      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c0:	4b4f      	ldr	r3, [pc, #316]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x180>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021c8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x180>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d028      	beq.n	8002228 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021d6:	4b4a      	ldr	r3, [pc, #296]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x180>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	099b      	lsrs	r3, r3, #6
 80021dc:	2200      	movs	r2, #0
 80021de:	623b      	str	r3, [r7, #32]
 80021e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80021e2:	6a3b      	ldr	r3, [r7, #32]
 80021e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80021e8:	2100      	movs	r1, #0
 80021ea:	4b47      	ldr	r3, [pc, #284]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x188>)
 80021ec:	fb03 f201 	mul.w	r2, r3, r1
 80021f0:	2300      	movs	r3, #0
 80021f2:	fb00 f303 	mul.w	r3, r0, r3
 80021f6:	4413      	add	r3, r2
 80021f8:	4a43      	ldr	r2, [pc, #268]	@ (8002308 <HAL_RCC_GetSysClockFreq+0x188>)
 80021fa:	fba0 1202 	umull	r1, r2, r0, r2
 80021fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002200:	460a      	mov	r2, r1
 8002202:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002206:	4413      	add	r3, r2
 8002208:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800220a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800220c:	2200      	movs	r2, #0
 800220e:	61bb      	str	r3, [r7, #24]
 8002210:	61fa      	str	r2, [r7, #28]
 8002212:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002216:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800221a:	f7fd ffe7 	bl	80001ec <__aeabi_uldivmod>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4613      	mov	r3, r2
 8002224:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002226:	e053      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002228:	4b35      	ldr	r3, [pc, #212]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x180>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	099b      	lsrs	r3, r3, #6
 800222e:	2200      	movs	r2, #0
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	617a      	str	r2, [r7, #20]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800223a:	f04f 0b00 	mov.w	fp, #0
 800223e:	4652      	mov	r2, sl
 8002240:	465b      	mov	r3, fp
 8002242:	f04f 0000 	mov.w	r0, #0
 8002246:	f04f 0100 	mov.w	r1, #0
 800224a:	0159      	lsls	r1, r3, #5
 800224c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002250:	0150      	lsls	r0, r2, #5
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	ebb2 080a 	subs.w	r8, r2, sl
 800225a:	eb63 090b 	sbc.w	r9, r3, fp
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800226a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800226e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002272:	ebb2 0408 	subs.w	r4, r2, r8
 8002276:	eb63 0509 	sbc.w	r5, r3, r9
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	00eb      	lsls	r3, r5, #3
 8002284:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002288:	00e2      	lsls	r2, r4, #3
 800228a:	4614      	mov	r4, r2
 800228c:	461d      	mov	r5, r3
 800228e:	eb14 030a 	adds.w	r3, r4, sl
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	eb45 030b 	adc.w	r3, r5, fp
 8002298:	607b      	str	r3, [r7, #4]
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80022a6:	4629      	mov	r1, r5
 80022a8:	028b      	lsls	r3, r1, #10
 80022aa:	4621      	mov	r1, r4
 80022ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80022b0:	4621      	mov	r1, r4
 80022b2:	028a      	lsls	r2, r1, #10
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022ba:	2200      	movs	r2, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	60fa      	str	r2, [r7, #12]
 80022c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c4:	f7fd ff92 	bl	80001ec <__aeabi_uldivmod>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4613      	mov	r3, r2
 80022ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80022d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002300 <HAL_RCC_GetSysClockFreq+0x180>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	3301      	adds	r3, #1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80022e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80022e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <HAL_RCC_GetSysClockFreq+0x184>)
 80022ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80022f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3740      	adds	r7, #64	@ 0x40
 80022f8:	46bd      	mov	sp, r7
 80022fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	00f42400 	.word	0x00f42400
 8002308:	017d7840 	.word	0x017d7840

0800230c <memset>:
 800230c:	4402      	add	r2, r0
 800230e:	4603      	mov	r3, r0
 8002310:	4293      	cmp	r3, r2
 8002312:	d100      	bne.n	8002316 <memset+0xa>
 8002314:	4770      	bx	lr
 8002316:	f803 1b01 	strb.w	r1, [r3], #1
 800231a:	e7f9      	b.n	8002310 <memset+0x4>

0800231c <__libc_init_array>:
 800231c:	b570      	push	{r4, r5, r6, lr}
 800231e:	4d0d      	ldr	r5, [pc, #52]	@ (8002354 <__libc_init_array+0x38>)
 8002320:	4c0d      	ldr	r4, [pc, #52]	@ (8002358 <__libc_init_array+0x3c>)
 8002322:	1b64      	subs	r4, r4, r5
 8002324:	10a4      	asrs	r4, r4, #2
 8002326:	2600      	movs	r6, #0
 8002328:	42a6      	cmp	r6, r4
 800232a:	d109      	bne.n	8002340 <__libc_init_array+0x24>
 800232c:	4d0b      	ldr	r5, [pc, #44]	@ (800235c <__libc_init_array+0x40>)
 800232e:	4c0c      	ldr	r4, [pc, #48]	@ (8002360 <__libc_init_array+0x44>)
 8002330:	f000 f818 	bl	8002364 <_init>
 8002334:	1b64      	subs	r4, r4, r5
 8002336:	10a4      	asrs	r4, r4, #2
 8002338:	2600      	movs	r6, #0
 800233a:	42a6      	cmp	r6, r4
 800233c:	d105      	bne.n	800234a <__libc_init_array+0x2e>
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	f855 3b04 	ldr.w	r3, [r5], #4
 8002344:	4798      	blx	r3
 8002346:	3601      	adds	r6, #1
 8002348:	e7ee      	b.n	8002328 <__libc_init_array+0xc>
 800234a:	f855 3b04 	ldr.w	r3, [r5], #4
 800234e:	4798      	blx	r3
 8002350:	3601      	adds	r6, #1
 8002352:	e7f2      	b.n	800233a <__libc_init_array+0x1e>
 8002354:	0800239c 	.word	0x0800239c
 8002358:	0800239c 	.word	0x0800239c
 800235c:	0800239c 	.word	0x0800239c
 8002360:	080023a0 	.word	0x080023a0

08002364 <_init>:
 8002364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002366:	bf00      	nop
 8002368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800236a:	bc08      	pop	{r3}
 800236c:	469e      	mov	lr, r3
 800236e:	4770      	bx	lr

08002370 <_fini>:
 8002370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002372:	bf00      	nop
 8002374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002376:	bc08      	pop	{r3}
 8002378:	469e      	mov	lr, r3
 800237a:	4770      	bx	lr
